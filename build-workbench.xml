<project name="proto-3.0" default="build">
  <property file="workbench.properties" />
  <property file="${basedir}/workbench/build-conf/build.properties" />

  <property name="custom.tasks.dir"
            location="${basedir}/lib/org.carrot2.antlib" />

  <property name="workbench.build.dir" value="tmp/workbench" />

  <property name="workbench.tests.html.report.dir"
            value="tmp/workbench/test-report" />

  <property name="workbench.tests.txt.report.dir"
            value="tmp/workbench/test-report-txt" />

  <!-- = = = = = = = = = = = = = = = = =
          macrodef: launchAntRunner          
         = = = = = = = = = = = = = = = = = -->
  <macrodef name="launchAntRunner">
    <attribute name="buildfile" />
    <attribute name="build.dir" />
    <attribute name="build.type" />
    <attribute name="props.file" default="workbench.properties" />
    <attribute name="extra.args" default="" />
    <sequential>
      <java jar="${eclipse.home}/plugins/${equinox.launcher.plugin.jar}"
            fork="true"
            failonerror="true">
        <arg line="-application org.eclipse.ant.core.antRunner" />
        <arg line="-buildfile @{buildfile}" />
        <arg line="-Dbuilder=${basedir}/workbench/build-conf/" />
        <arg line="-DbuildDirectory=@{build.dir}" />
        <arg line="-Dcarrot2.dir=${basedir}" />
        <arg line="-Dtarget.platform=${target.platform}" />
        <arg line="-Dbuild.type=@{build.type}" />
        <arg line="@{extra.args}" />
        <arg line="-propertyfile ${basedir}/@{props.file}" />
      </java>
    </sequential>
  </macrodef>

  <!-- = = = = = = = = = = = = = = = = =
          macrodef: checkAccessRestriction          
         = = = = = = = = = = = = = = = = = -->
  <macrodef name="checkAccessRestriction">
    <attribute name="logsBasedir" />
    <sequential>
      <fail message="Access Restriction errors during build! Are you sure all packages from carrot2 are made visible at runtime?">
        <condition>
          <resourcecount when="greater" count="0">
            <fileset dir="@{logsBasedir}">
              <include name="**/compilelogs/**" />
              <contains text="Access restriction" />
            </fileset>
          </resourcecount>
        </condition>
      </fail>
    </sequential>
  </macrodef>

  <!-- - - - - - - - - - - - - - - - - - 
          target: init                      
         - - - - - - - - - - - - - - - - - -->
  <target name="init">
    <ant dir="${custom.tasks.dir}" antfile="build.xml" target="jar" />

    <taskdef resource="org.carrot2.antlib.xml">
      <classpath>
        <pathelement location="${custom.tasks.dir}/org.carrot2.antlib.jar" />
      </classpath>
    </taskdef>

    <findVersion property="equinox.launcher.plugin.jar"
                 eclipsehome="${eclipse.home}"
                 pluginid="org.eclipse.equinox.launcher"
                 pluginform="jar" />
    <findVersion property="pde.build.plugin"
                 eclipsehome="${eclipse.home}"
                 pluginid="org.eclipse.pde.build"
                 pluginform="dir" />

    <echo>Equinox version: ${equinox.launcher.plugin.jar}, PDE build plugin: ${pde.build.plugin}</echo>
  </target>

  <target name="build"
          description="Builds workbench without test plugins"
          depends="init">
    <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
        <pathelement location="${basedir}/etc/ant/ant-contrib-1.0b3.jar" />
      </classpath>
    </taskdef>

    <property name="build.props" value="workbench.properties" />
    <property name="build.dir" value="build-dir" />
    <launchAntRunner buildfile="${eclipse.home}/plugins/${pde.build.plugin}/scripts/productBuild/productBuild.xml"
                     build.dir="${basedir}/${workbench.build.dir}/${build.dir}"
                     build.type="build"
                     props.file="${build.props}"
                     extra.args="-Dproduct=/org.carrot2.workbench/Workbench.product" />
    <checkAccessRestriction logsbasedir="${basedir}/${workbench.build.dir}/${build.dir}" />
    
    <!-- Add Carrot2 license file to the distribution ZIP files -->    
    <for param="zip">
      <path>
        <fileset dir="${basedir}/${workbench.build.dir}/${build.dir}/${buildLabel}">
          <include name="**/${archivePrefix}*.zip" />
        </fileset>
      </path>
    
      <sequential>
        <zip destfile="@{zip}" update="true">
          <zipfileset dir="${basedir}" prefix="${archivePrefix}">
            <include name="carrot2.LICENSE" />
            <include name="carrot2.CONTRIBUTORS" />
          </zipfileset>
          <zipfileset dir="${basedir}/workbench" prefix="${archivePrefix}">
            <include name="readme.txt" />
          </zipfileset>
        </zip>
      </sequential>
    </for>
  </target>

  <target name="test"
          description="Builds workbench with test plugins and runs tests"
          depends="init">
    <condition property="test.props"
               value="workbench.test.properties"
               else="workbench.properties">
      <available file="${basedir}/workbench.test.properties" />
    </condition>
    <antcall target="build">
      <param name="build.props" value="${test.props}" />
      <param name="build.dir" value="test-dir" />
    </antcall>
    <launchAntRunner buildfile="${eclipse.home}/plugins/${pde.build.plugin}/scripts/productBuild/productBuild.xml"
                     build.dir="${basedir}/${workbench.build.dir}/test-dir"
                     build.type="test"
                     props.file="${test.props}" />
    <checkAccessRestriction logsbasedir="${basedir}/${workbench.build.dir}/test-dir" />

    <property name="test.eclipse.home"
              location="${basedir}/${workbench.build.dir}/test-dir/tmp/${archivePrefix}" />
    <findVersion property="workbench.core.test.dir"
                 pluginid="org.carrot2.workbench.core.test"
                 pluginform="dir"
                 eclipsehome="${test.eclipse.home}" />

<!--
  Workaround: testing framework expects that executable will be called eclipse :/

     <move todir="${test.eclipse.home}">
       <fileset dir="${test.eclipse.home}">
         <include name="carrot2-workbench*"/>
       </fileset>
       <mapper type="glob" from="carrot2-workbench*" to="eclipse*"></mapper>
      </move>
-->    
    <property name="org.carrot2.antlib" location="lib/org.carrot2.antlib" />
    <java jar="${eclipse.home}/plugins/${equinox.launcher.plugin.jar}"
          fork="true"
          failonerror="true">
      <arg line="-application org.eclipse.ant.core.antRunner" />
      <arg line="-buildfile ${test.eclipse.home}/plugins/${workbench.core.test.dir}/test.xml" />
      <arg line="-Declipse-home=${test.eclipse.home}" />
      <arg line="-Dorg.carrot2.antlib=${org.carrot2.antlib}" />
      <arg line="-Dos=${test.os} -Dws=${test.ws} -Darch=${test.arch}" />
    </java>
    <!-- JUnit report -->
    <mkdir dir="${workbench.tests.html.report.dir}" />
    <junitreport todir="${workbench.tests.html.report.dir}">
      <fileset dir="${basedir}/${workbench.build.dir}/test-dir/tmp/${archivePrefix}">
        <include name="*.xml" />
      </fileset>
      <report format="frames"
              todir="${workbench.tests.html.report.dir}" />
    </junitreport>
    <!-- Copy XML reports -->
    <copy todir="${workbench.tests.html.report.dir}">
      <fileset dir="${basedir}/${workbench.build.dir}/test-dir/tmp/${archivePrefix}">
        <include name="*.xml" />
      </fileset>
      <mapper type="glob" from="*.xml" to="TEST-*.xml" />
    </copy>
    <!-- Copy text reports -->
    <mkdir dir="${workbench.tests.txt.report.dir}" />
    <copy todir="${workbench.tests.txt.report.dir}">
      <fileset dir="${basedir}/${workbench.build.dir}/test-dir/tmp/${archivePrefix}/raw-output">
        <include name="*.txt" />
      </fileset>
    </copy>
    <!-- 
             A hacky way of finding out whether tests passed. The Eclipse runner doesn't
             seem to expose this information directly.
        -->
    <loadfile property="testxml"
              srcFile="${workbench.tests.html.report.dir}/TESTS-TestSuites.xml" />
    <fail message="Tests failed, see ${workbench.tests.html.report.dir} for report.">
      <condition>
        <or>
          <matches string="${testxml}"
                   pattern='errors="[1-9][0-9]*"' />
          <matches string="${testxml}"
                   pattern='failures="[1-9][0-9]*"' />
          <matches string="${testxml}"
                   pattern="errors='[1-9][0-9]*'" />
          <matches string="${testxml}"
                   pattern="failures='[1-9][0-9]*'" />
        </or>
      </condition>
    </fail>
    <fail message="Tests did not run, see ${workbench.tests.txt.report.dir} for logs.">
      <condition>
        <or>
          <matches string="${testxml}" pattern="testsuites />" />
        </or>
      </condition>
    </fail>

  </target>

  <target name="clean">
    <delete dir="tmp/workbench" />
  </target>
</project>
