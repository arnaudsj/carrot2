<?xml version="1.0" encoding="UTF-8" ?>
<project name="carrot2.doc.common">
  <!-- Base dir determined from the build file location -->
  <dirname property="carrot2.doc.basedir.internal"
           file="${ant.file.carrot2.doc.common}/../.." />

  <!-- Master build base dir -->
  <property name="carrot2.master.basedir"
            location="${carrot2.doc.basedir.internal}/.." />

  <import file="${carrot2.master.basedir}/lib/org.carrot2.antlib/build.xml" />

  <!-- We'll be using Carrot2 internal Xalan -->
  <property name="xalan.home" location="${carrot2.master.basedir}/lib/org.apache.xml" />

  <!-- Catalog for local copies of DocBook DTD and XSL-NS -->
  <xmlcatalog id="docbook">
    <dtd publicId="-//OASIS//DTD DocBook XML V5.0//EN"
         location="${docbook.dtd.dir}/docbook.dtd" />
    <dtd publicId="http://docbook.sourceforge.net/release/xsl-ns/current/html/docbook.xsl"
         location="${docbook.xsl.dir}/html/docbook.xsl" />
  </xmlcatalog>

  <!--
       Renders the DocBook manual into HTML.
    -->
  <macrodef name="carrot2.doc.build">
    <attribute name="doc.main.docbook.filename" />
    <attribute name="doc.base.dir" />
    <attribute name="doc.suite.path" />
    <attribute name="doc.output.dir" />
    <attribute name="doc.build.dir" />
    <element name="attribute.dumper.classpath.entries" />
    <element name="xslt.param.entries" />

    <sequential>
      <!-- Prepare -->
      <carrot2.doc.prepare doc.build.dir="@{doc.build.dir}" 
                           doc.base.dir="@{doc.base.dir}" />

      <!-- Build attribute reference chapter -->
      <carrot2.doc.attributes doc.build.dir="@{doc.build.dir}"
                              suite.path="@{doc.suite.path}">
        <attributes.classpath.entries>
          <attribute.dumper.classpath.entries />
        </attributes.classpath.entries>

        <attributes.xslt.param.entries>
          <xslt.param.entries />
        </attributes.xslt.param.entries>
      </carrot2.doc.attributes>

      <!-- Build the actual manual -->
      <carrot2.doc.html doc.main.docbook.filename="@{doc.main.docbook.filename}"
                        doc.build.dir="@{doc.build.dir}"
                        doc.output.dir="@{doc.output.dir}"
                        doc.base.dir="@{doc.base.dir}">
        <html.xslt.param.entries>
          <xslt.param.entries />
        </html.xslt.param.entries>
      </carrot2.doc.html>

      <!-- Clean up -->
      <carrot2.doc.cleanup doc.build.dir="@{doc.build.dir}" />
    </sequential>
  </macrodef>

  <!--
       Renders the DocBook manual into HTML.
    -->
  <macrodef name="carrot2.doc.html">
    <attribute name="doc.main.docbook.filename" />
    <attribute name="doc.build.dir" />
    <attribute name="doc.base.dir" />
    <attribute name="doc.output.dir" />
    <element name="html.xslt.param.entries" />
    
    <sequential>
      <mkdir dir="@{doc.output.dir}" />
      
      <xslt in="@{doc.build.dir}/docbook/@{doc.main.docbook.filename}"
            style="@{doc.build.dir}/xsl/filtering.xsl"
            out="@{doc.output.dir}/filtered.xml"
            force="yes">
        <xmlcatalog refid="docbook" />
        
        <html.xslt.param.entries />
      </xslt>

      <!-- Build the actual manual -->
      <xslt in="@{doc.output.dir}/filtered.xml"
            style="@{doc.build.dir}/xsl/html-custom/docbook.xsl"
            out="@{doc.output.dir}/index.html"
            basedir="${docbook.xsl.dir}"
            force="yes">
        <xmlcatalog refid="docbook" />

        <classpath>
          <fileset dir="${xalan.home}">
            <include name="*.jar" />
          </fileset>
        </classpath>
      
        <!-- 
          <factory> enforcement will not work due to this
          bug in ANT: https://issues.apache.org/bugzilla/show_bug.cgi?id=46172 
        -->
        <!-- <factory name="org.apache.xalan.processor.TransformerFactoryImpl" /> -->

        <html.xslt.param.entries />
      </xslt>

      <delete file="@{doc.output.dir}/filtered.xml" />
      
      <copy todir="@{doc.output.dir}">
        <fileset dir="@{doc.base.dir}/assets">
          <include name="css/**" />
          <include name="img/**" />
        </fileset>
      </copy>
    </sequential>
  </macrodef>

  <!--
       Builds the DocBook source for the attribute reference chapter.
    -->
  <macrodef name="carrot2.doc.attributes">
    <attribute name="doc.build.dir" />
    <attribute name="suite.path" />
    <element name="attributes.classpath.entries" />
    <element name="attributes.xslt.param.entries" />

    <sequential>
      <property name="doc.src.dir" location="${carrot2.doc.basedir.internal}/src" />

      <mkdir dir="@{doc.build.dir}/classes" />

      <!-- Build attribute dumper first -->
      <javac destdir="@{doc.build.dir}/classes"
             compiler="modern"
             source="1.5"
             target="1.5"
             encoding="UTF-8"
             debug="true"
             debuglevel="lines">
        <src path="${doc.src.dir}" />
        <classpath>
          <attributes.classpath.entries />
        </classpath>
      </javac>

      <mkdir dir="@{doc.build.dir}/xsl" />
      <java classname="org.carrot2.core.ProcessingComponentDumper"
            outputproperty="dev.null">
        <classpath>
          <attributes.classpath.entries />
          <path path="@{doc.build.dir}/classes" />
        </classpath>
        <arg value="@{suite.path}" />
        <arg value="@{doc.build.dir}/xsl/components-metadata.xml" />
      </java>

      <!-- 
           HACK: remove CDATA sections from the description tags. This is the only
           reasonably easy way of transforming HTML from JavaDocs into DocBook counterparts.
           The downside is obviously that if the HTML in JavaDoc is not valid XML,
           the documentation generation will fail.
        -->
      <copy file="@{doc.build.dir}/xsl/components-metadata.xml"
            tofile="@{doc.build.dir}/xsl/components-metadata-nocdata.xml"
            filtering="yes">
        <filterset begintoken="&lt;description&gt;" endtoken="CDATA[">
          <filter token="&lt;![" value="&lt;description&gt;" />
        </filterset>
        <filterset begintoken="]]&gt;" endtoken="&gt;">
          <filter token="&lt;/description" value="&lt;/description&gt;" />
        </filterset>
        <filterset begintoken="&lt;title&gt;" endtoken="CDATA[">
          <filter token="&lt;![" value="&lt;title&gt;" />
        </filterset>
        <filterset begintoken="]]&gt;" endtoken="&gt;">
          <filter token="&lt;/title" value="&lt;/title&gt;" />
        </filterset>
      </copy>
      <copy file="@{doc.build.dir}/xsl/components-metadata.xml"
            tofile="@{doc.build.dir}/xsl/components-metadata-orig.xml" 
            overwrite="true" />
      <copy file="@{doc.build.dir}/xsl/components-metadata-nocdata.xml"
            tofile="@{doc.build.dir}/xsl/components-metadata.xml" 
            overwrite="true" />

      <!-- Validate if the HTML in JavaDocs was indeed a vaild XML -->
      <xmlvalidate file="@{doc.build.dir}/xsl/components-metadata.xml" 
                   failonerror="true" lenient="true" />

      <xslt in="@{doc.build.dir}/docbook/components.template.xml"
            style="@{doc.build.dir}/xsl/attributes-to-docbook.xsl"
            out="@{doc.build.dir}/docbook/components.xml">
        <xmlcatalog refid="docbook" />
        <attributes.xslt.param.entries />
      </xslt>

      <delete dir="@{doc.build.dir}/classes" />
    </sequential>
  </macrodef>

  <!--
       Prepares all resources required for processing.
    -->
  <macrodef name="carrot2.doc.prepare">
    <attribute name="doc.build.dir" />
    <attribute name="doc.base.dir" />
    
    <sequential>
      <!-- Prepare build directory -->
      <mkdir dir="@{doc.build.dir}" />

      <copy todir="@{doc.build.dir}/docbook">
        <fileset dir="@{doc.base.dir}/docbook" />
      </copy>

      <copy todir="@{doc.build.dir}/xsl">
        <fileset dir="@{doc.base.dir}/xsl">
          <include name="**/*.xsl" />
        </fileset>
      </copy>
    </sequential>
  </macrodef>

  <!--
       Cleans up intermediate files.
    -->
  <macrodef name="carrot2.doc.cleanup">
    <attribute name="doc.build.dir" />
    
    <sequential>
      <delete dir="@{doc.build.dir}" />
    </sequential>
  </macrodef>

  <target name="docbook.check" depends="enable.xincludes">
    <fail unless="docbook.xsl.dir" message="Please specify docbook.xsl.dir" />
    <fail unless="docbook.dtd.dir" message="Please specify docbook.dtd.dir" />
    <fail unless="xalan.home" message="Please specify xalan.home" />
  </target>

  <target name="enable.xincludes" depends="carrot2.common.antlib.tasks">
    <setProperty sysproperty="org.apache.xerces.xni.parser.XMLParserConfiguration" value="org.apache.xerces.parsers.XIncludeParserConfiguration" />
  </target>
</project>
