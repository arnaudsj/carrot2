<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN"
                 "http://www.docbook.org/xml/5.0/dtd/docbook.dtd" [
  <!ENTITY % local SYSTEM "local-entities.ent">
  <!ENTITY % custom SYSTEM "custom-entities.ent">
  %local;
  %custom;
]>
<chapter xml:id="chapter.tuning" version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:product="http://www.carrot2.org">
  <title>Tuning clustering</title>
  <subtitle>Fine-tuning &PROD; clustering</subtitle>

  <para>
    This chapter discusses a number of typical fine-tuning scenarios for &PROD; clustering
    algorithms. Some of the scenarios are relevant to all &PROD; algorithms, while others
    are specific to individual algorithms.
  </para>

  <section xml:id="section.advanced-topics.fine-tuning.input-documents-characteristics">
    <title>Desirable characteristics of documents for clustering</title>
    
    <para>
      The quality of clusters and their labels largely depends on the 
      characteristics of documents provided on the input. Although there is no general
      rule for optimum document content, below are some tips worth considering.
    </para>
    
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>&PROD; is designed for small to medium collections of documents.</title>
          
          <para>
            The most important characteristic of &PROD; algorithms to keep in mind is
            that they perform in-memory clustering. For this reason, as a rule of
            thumb, &PROD; should successfully deal with up to a thousand of
            documents, a few paragraphs each. For algorithms designed to process
            millions of documents, you may want to check out the 
            <link xlink:href="http://lucene.apache.org/mahout/">Mahout</link> project.
          </para>
        </formalpara>
      </listitem>
      
      <listitem>
        <formalpara>
          <title>Provide a minimum of 20 documents.</title>
          
          <para>
            &PROD; clustering algorithms will work best with a set of documents similar
            to what is normally returned by a typical search engine. While about 20 is the
            minimum number of documents you can reasonably cluster, the optimum would fall
            in the 100 &ndash; 500 range. 
          </para>
        </formalpara>
      </listitem>
      
      <listitem>
        <formalpara>
          <title>Provide contextual snippets if possible.</title>
          
          <para>
            If the input documents are a result of some search query, provide
            contextual snippets related to that query, similar
            to what web search engines return, instead of full document content. Not only
            will this speed up processing, but also should help the clustering
            algorithm to cover the full spectrum of topics dealt with in the search results. 
          </para>
        </formalpara>
      </listitem>
      
      <listitem>
        <formalpara>
          <title>Minimize "noise" in the input documents.</title>
          
          <para>
            All kinds of "noise" in the documents, such as truncated sentences (sometimes resulting from 
            contextual snippet extraction suggested above) or random alphanumerical strings
            may decrease the quality of cluster labels. If you have access to e.g. a few
            sentences' abstract of each document, it is worth checking the quality of 
            clustering based on those abstracts. If you can combine this with the
            previous tip, i.e. extract complete sentences matching user's query, this
            should improve the clusters even further.  
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
      
      <para>
        Let us once again stress that there are no definite generic guidelines for
        the best content for clustering, <emphasis role="bold">it is always worth 
        experimenting with different combinations.</emphasis> You can also describe 
        your specific application on &PROD; mailing list and ask for advice.
      </para>
  </section>
   
  <section xml:id="section.advanced-topics.fine-tuning.choosing-algorithm">
    <title>Choosing the clustering algorithm</title>
    
    <para>
      Currently, &PROD; offers two specialized search results clustering algorithms:
      Lingo and STC. The algorithms differ in terms of the main clustering principle and 
      hence have different quality and performance characteristics. This section describes
      briefly the two algorithms and provides some recommendations for choosing the
      most suitable one.
    </para>
    
    <para>
      The key characteristic of the <emphasis role="bold">Lingo</emphasis> algorithm is that it reverses the traditional 
      clustering pipeline: it first identifies cluster labels and only then assigns documents
      to the labels to form final clusters. To find the labels, Lingo builds a 
      <link xlink:href="http://en.wikipedia.org/wiki/Document-term_matrix">term-document matrix</link>
      for all input documents and decomposes the matrix to obtain a number of base vectors 
      that well approximate the matrix in a low-dimensional space. Each such vector
      gives rise to one cluster label. To complete the clustering process, each label is
      assigned documents that contain the label's words.
    </para>
    
    <para>
      The key data structure used in the <emphasis role="bold">Suffix Tree Clustering (STC)</emphasis> algorithm is a 
      <link xlink:href="http://en.wikipedia.org/wiki/Generalised_suffix_tree">Generalized Suffix Tree (GST)</link>
      built for all input documents. The algorithm traverses the GST to identify words and 
      phrases that occurred more than once in the input documents. Each such word or phrase
      gives rise to one <emphasis>base cluster</emphasis>. The last stage of the clustering 
      process is merging base clusters to form the final clusters.
    </para>
    
    <para>
      The two algorithms have two features in common. They both create overlapping 
      clusterings, in which one document can be assigned to more than one cluster. Also,
      in case of both algorithms a certain number of documents can remain unclustered and 
      fall in the <emphasis>Other Topics</emphasis> group.
    </para>
    
    <para>
      <xref linkend="table.lingo-stc-characteristics" /> compares the characteristics
      of Lingo and STC under their default settings and <xref linkend="figure.lingo-stc-clusters" />
      shows clusters generated by Lingo and STC for <emphasis>data mining</emphasis> search results.
    </para>
    
    <table xml:id="table.lingo-stc-characteristics" frame="none">
      <title>Characteristics of Lingo and STC clustering algorithms</title>
      
      <tgroup cols='3' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry>Feature</entry>
            <entry>Lingo</entry>
            <entry>STC</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Cluster diversity</entry>
            <entry>High, many small (outlier) clusters highlighted</entry>
            <entry>Low, small (outlier) clusters rarely highlighted</entry>
          </row>
          <row>
            <entry>Cluster labels</entry>
            <entry>Longer, often more descriptive</entry>
            <entry>Shorter, but still appropriate</entry>
          </row>
          <row>
            <entry>Scalability</entry>
            <entry>
              Low. For more than about 1000 documents, Lingo clustering will take a long time and large memory<footnote><para>Performance of the  
              pure Java version of Lingo can be improved by <link linkend="section.advanced-topics.native-matrix-computations">installing 
              native matrix computation libraries</link>.</para></footnote>. 
             </entry>
            <entry>High</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <figure xml:id="figure.lingo-stc-clusters">
      <title>Lingo and STC clusters for the 'data mining' search results</title>
      <mediaobject>
        <imageobject role="html">
          <imagedata format="PNG" fileref="img/lingo-vs-stc-clusters.png" />
        </imageobject>
      </mediaobject>  
    </figure>

    <para>
      It is difficult to give one clear recommendation as to which algorithm is "better".
      Many people feel Lingo delivers better-formed and more diverse clusters at the cost of
      lower performance and scalability. The ultimate judgment, however, should based on 
      the evaluation with the specific document collection. <xref linkend="table.lingo-stc-recommendations" /> 
      highlights the scenarios for which the algorithms are best suited.
    </para>
    
    <table xml:id="table.lingo-stc-recommendations" frame="none">
      <title>Optimum usage scenarios for Lingo and STC</title>
      
      <tgroup cols='3' colsep='1' rowsep='1'>
        <thead>
          <row>
            <entry>Feature</entry>
            <entry>Use Lingo</entry>
            <entry>Use STC</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Well-formed longer labels required</entry>
            <entry role="center">&TICK;</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Highlighting of small (outlier) clusters required</entry>
            <entry role="center">&TICK;</entry>
            <entry></entry>
          </row>
          <row>
            <entry>High clustering performance or large document set processing required</entry>
            <entry></entry>
            <entry role="center">&TICK;</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    
    <para>
      <emphasis role="bold">The bottom line is</emphasis>: use Lingo, unless you need 
      high-performance clustering of document sets larger than 1000 documents.
    </para>    
    
    <tip>
      <para>
        For a more scientifically-oriented discussion and evaluation of the two algorithms, please
        check the <link xlink:href="http://project.carrot2.org/publications.html">publications 
        on &PROD; website</link>.
      </para>
    </tip>
    
    <note>
      <para>
        Carrot Search, a company founded by &PROD; authors, offers a commercial <link xlink:href="http://company.carrot-search.com/lingo-3g-vs-classic.html">document 
        clustering engine</link> called Lingo3G that produces Lingo-quality hierarchical 
        clusters at a better-than-STC speed. Please <link xlink:href="http://company.carrot-search.com/contact.html">contact 
        Carrot Search</link> for details.  
      </para>
    </note>
  </section>
   
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="tuning-in-workbench.xml" /> 
   
  <section xml:id="section.advanced-topics.fine-tuning.stop-words">
    <title>Modifying the list of stop words</title>
    
    <para>
      Stop words are the common meaningless words, such as <emphasis>the</emphasis>, 
      <emphasis>to</emphasis>, <emphasis>for</emphasis> in English, that should be 
      ignored while clustering. The Lingo algorithm, for example, will not create
      clusters whose labels start or end in a stop word.
    </para>
    
    <para>
      To fine-tune the stop words list you can use the 
      <link linkend="section.workbench">&DCW;</link> in the following way:
    </para>
    
    <orderedlist>
      <listitem>
        <para>
          Start &DCW; and run some query on which you'll be observing the results
          of your changes.
        </para>
      </listitem>
      
      <listitem>
        <para>
          Go to the <filename>workspace/</filename> directory which is located in
          the directory to which you extracted &DCW;. Modify the <filename>stopwords.*</filename>
          file for the language you are working on (e.g. <filename>stopwords.en</filename>
          for English). Add or remove stop words as required and save changes.
        </para>
      </listitem>
      
      <listitem>
        <para>
          Open the <guilabel>Attributes</guilabel> view and use the view toolbar's
          <guiicon><inlinemediaobject><imageobject role="html"><imagedata format="PNG" fileref="img/icon-attribute-grouping.png" /></imageobject></inlinemediaobject></guiicon>
          button to group the attributes by semantics. In the <guilabel>Preprocessing</guilabel>
          section, make sure the <guilabel>Processing language</guilabel> is correctly set and
          check the <guilabel>Reload stopwords</guilabel> checkbox. Doing the latter
          will let you to see the updated clustering results without restarting &DCW;
          every time you save the changed stop word list.
        </para>
    
        <figure xml:id="figure.preprocessing-attributes">
          <title>Preprocessing attributes section</title>
          <mediaobject>
            <imageobject role="html">
              <imagedata format="PNG" fileref="img/workbench-preprocessing-attributes.png" />
            </imageobject>
          </mediaobject>  
        </figure>
      </listitem>
      
      <listitem>
        <para>
          To re-run clustering after
          you've saved changes to the <filename>stopwords.*</filename>, choose the
          <guilabel>Restart Processing</guilabel> option from the <guilabel>Search</guilabel>
          menu, or press <guilabel>Ctrl+F11</guilabel>.
        </para>
      </listitem>
    </orderedlist>
    
    <tip>
      <para>
        To transfer the changed stop words file to other &C2; applications, update
        the existing stop words file in the <filename>carrot2-core.jar</filename> the application
        is using. In case of the &DCS; and &WA;, the <filename>carrot2-core.jar</filename> is located
        in the <filename>WEB-INF/lib</filename> directory.
      </para>
    </tip>
  </section>
    
  <section xml:id="section.advanced-topics.fine-tuning.stop-regexps">
    <title>Excluding specific clusters from results</title>
    
    <para>
      The Lingo clustering algorithm, in addition to 
      <link linkend="section.advanced-topics.fine-tuning.stop-words">stop words editing</link>,
      offers more precise control over cluster labels by means of "stop label" regular expressions. 
      If a cluster's label matches one of the stop labels, the label will not appear 
      on the list of clusters produced by Lingo.
    </para>
    
    <para>
      The procedure for tuning stop labels and transferring them to other &C2; applications is similar to 
      <link linkend="section.advanced-topics.fine-tuning.stop-words">stop word tuning</link>.
      The difference is that this time you need to edit the <filename>stoplabels.*</filename> files.
      Each line of a stop labels file corresponds to one stop label and is a <link xlink:href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html">Java regular
      expression</link>. Please note that in order to be removed, a label <emphasis>as a whole</emphasis> must match 
      at least one of the stop label expressions. A number of example
      stop label expressions are shown below.
    </para>
    
    <programlisting>(?i)new
(?i)information
(?i)information (about|on).*
(?i)(index|list) of.*</programlisting>

    <para>
      All stop labels shown above start with the <tag>(?i)</tag> prefix, which enables 
      case-insensitive matching for them. The stop label in the first line suppresses 
      labels consisting solely of the word <emphasis>new</emphasis>. Similarly, the stop label
      in the second line removes labels consisting of the word <emphasis>information</emphasis>.
      The stop label in the third line removes labels that start in <emphasis>information about</emphasis>
      or <emphasis>information on</emphasis>, and the stop label in the fourth line removes
      labels that start with <emphasis>index of</emphasis> or <emphasis>list of</emphasis>. 
    </para>
    
    <note>
      <para>
        Please note that defining a very large number of stop labels (100+) may 
        significantly slow down clustering. In such cases you may want to combine
        separate stop label expressions into one larger regular expression.
      </para>
    </note>
  </section>
    
  <section xml:id="section.advanced-topics.fine-tuning.reducing-other-topics">
    <title>Reducing the size of the <emphasis>Other Topics</emphasis> cluster</title>
    
    <para>
      The <emphasis>Other Topics</emphasis> cluster contains documents that do not belong
      to any other cluster generated by the algorithm. Depending on the input documents, the size of
      this cluster may vary from a few to tens of documents.
    </para>
    
    <para>
      By tuning parameters of the clustering algorithm, you can reduce the number of
      unclustered documents, however bringing the number down to 0 is unachievable in most cases.
      Please note that minimizing the <emphasis>Other Topics</emphasis> cluster size is usually achieved
      by forcing the algorithm to create more clusters, which may degrade the perceived
      clustering quality.
    </para>
    
    <tip>
      <para>
        The easiest way to try different clustering algorithm settings is to use
        the <link linkend="section.workbench">&DCW;</link>.
      </para>
    </tip>
    
    <!-- Single-level subsections are discouraged. Do we need to have this one? -->
    <simplesect>
      <title>Tuning Lingo algorithm for smallest <emphasis>Other Topics</emphasis> cluster</title>

      <para>
        To reduce the size of the <emphasis>Other Topics</emphasis> cluster generated
        by Lingo, you can try applying the following settings:
      </para>
      
      <orderedlist>
        <listitem>
          <para>
            Change the <link linkend="LingoClusteringAlgorithm.factorizationFactory" role="attribute" /> attribute
            to <classname>LocalNonnegativeMatrixFactorizationFactory</classname>.
          </para>
        </listitem>
        
        <listitem>
          <para>
            Increase the <link linkend="LingoClusteringAlgorithm.desiredClusterCountBase" role="attribute" />
            above the default value.
          </para>
        </listitem>
        
        <listitem>
          <para>
            Decrease the <link linkend="LingoClusteringAlgorithm.phraseLabelBoost" role="attribute" />.
            Note that this will increase the number of one-word labels, which may not always
            be desirable.
          </para>
        </listitem>
      </orderedlist>
    
      <tip>
        <para>
          To apply the changes to the &PROD; applications, please follow instructions from
          <xref linkend="chapter.customizing" />.
        </para>
      </tip>
    </simplesect>
  </section>

  <section xml:id="section.advanced-topics.fine-tuning.performance">
    <title>Improving clustering performance</title>
    
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="tuning-general-performance-notes.xml" /> 
    
    <para>
      Further performance tuning tips are specific for each clustering algorithm.
    </para>

    <section xml:id="ection.advanced-topics.fine-tuning.performance.lingo">
      <title>Improving performance of Lingo</title>
      
      <para>
        You can change a number of attributes to increase the performance of Lingo. Most often,
        performance gain will be achieved at the cost of lowered clustering quality or
        significant change in the structure of clusters.
      </para>
      
      <itemizedlist>
        <listitem>
          <para>
            Lower <link role="attribute" linkend="LingoClusteringAlgorithm.factorizationQuality" />,
            which will cause the matrix factorization algorithm to perform fewer iterations
            and hence complete quicker. Alternatively, you can set <link role="attribute" linkend="LingoClusteringAlgorithm.factorizationFactory" />
            to <code>org.carrot2.matrix.factorization.PartialSingularValueDecompositionFactory</code>, 
            which is slightly faster than the other factorizations. In the latter case
            <link role="attribute" linkend="LingoClusteringAlgorithm.factorizationQuality" /> 
            becomes irrelevant. 
          </para>
        </listitem>
        
        <listitem>
          <para>
            Lower <link role="attribute" linkend="TermDocumentMatrixBuilder.maximumMatrixSize" />,
            which would cause the matrix factorization algorithm to complete quicker and
            use less memory. With small matrix sizes, Lingo may not be able to discover
            smaller clusters.
          </para>
        </listitem>
      </itemizedlist>      
    </section>
    
    <section xml:id="ection.advanced-topics.fine-tuning.performance.stc">
      <title>Improving performance of STC</title>
      
      <para>
        &NA;
      </para>
    </section>
  </section>
  
  <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="tuning-benchmarking.xml" /> 
</chapter>

