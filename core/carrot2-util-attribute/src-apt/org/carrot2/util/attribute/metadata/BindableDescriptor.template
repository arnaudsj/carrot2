
#macro (stringOrEmpty $str)"${esc.java($stringutils.defaultIfEmpty($str, ""))}"#end
#macro (stringOrNull $str)#if ($str)"$esc.java($str)"#else#* *#null#end#end

// APT-generated file.

package ${packageName};

import java.util.*;
import javax.annotation.*;

// Imported for JavaDoc references mostly.
import org.carrot2.util.attribute.*;

/**
 * Metadata and attributes of the {@link ${sourceType.qualifiedName}} component. You can use 
 * this descriptor to obtain metadata, such as human readable name and description, about the component 
 * as a whole as well as about its attributes. Using the {@link #attributeBuilder(Map)}
 * you can obtain a builder for type-safe generation of the attribute maps. Please see the
 * <a href="{@docRoot}/overview-summary.html#setting-attributes">main overview</a> for a complete code example. 
 */
@Generated("Generated from ${sourceType.qualifiedName}")
public final class ${sourceType.simpleName}Descriptor implements IBindableDescriptor
{
    /**
     * The component class for which this descriptor was generated. 
     */
    public final String bindableClassName = "${esc.java($sourceType.qualifiedName)}";

    /**
     * Attribute prefix used by the component.
     */
    public final String prefix = "${esc.java($bindable.prefix())}";

    /**
     * A one sentence summary of the component. It could be presented as a header of the tool
     * tip of the corresponding UI component.
     */
    public final String title = #stringOrEmpty($metadata.title);
    
    /**
     * A short label for the component. It can be presented as a label of the
     * corresponding UI component.
     */
    public final String label = #stringOrEmpty($metadata.label);

    /**
     * A longer, possibly multi sentence, description of the component. It could be presented
     * as a body of the tool tip of the corresponding UI component.
     */
    public final String description = #stringOrEmpty($metadata.description);

    /**
     * Attributes of the component. Note that only statically reachable fields are included.
     * Additional attributes may be available at run time. 
     */
    public final static Attributes attributes; 

    /**
     * Attributes declared directly by the component.
     */
    private final static Set<AttributeInfo> ownAttributes;

    /**
     * Attributes declared by the component or its superclasses.
     */
    private final static Set<AttributeInfo> allAttributes;

    /**
     * Attributes declared by the component or its superclasses, lookup dictionary 
     * by attribute key.
     */
    private final static Map<String, AttributeInfo> allAttributesByKey;

    /**
     * Attributes declared by the component or its superclasses, lookup dictionary by 
     * attribute's field name.
     */
    private final static Map<String, AttributeInfo> allAttributesByFieldName;

    /**
     * Static initializer for internal collections.
     */
    static
    {
        attributes = new Attributes();

        final Set<AttributeInfo> ownAttrs = new HashSet<AttributeInfo>();
#foreach ($attr in $ownFields)
        ownAttrs.add(attributes.${attr.field.simpleName});
#end

        final Set<AttributeInfo> allAttrs = new HashSet<AttributeInfo>();
#foreach ($attr in $allFields)
        allAttrs.add(${attr.descriptorClass}.attributes.${attr.field.simpleName});
#end

        allAttributes = Collections.unmodifiableSet(allAttrs);
        ownAttributes = Collections.unmodifiableSet(ownAttrs);
        
        final Map<String, AttributeInfo> allAttrsByKey = new HashMap<String, AttributeInfo>();
        final Map<String, AttributeInfo> allAttrsByFieldName = new HashMap<String, AttributeInfo>();
        for (AttributeInfo ai : allAttrs)
        {
            allAttrsByKey.put(ai.key, ai);
            allAttrsByFieldName.put(ai.fieldName, ai);
        }

        allAttributesByKey = Collections.unmodifiableMap(allAttrsByKey);
        allAttributesByFieldName = Collections.unmodifiableMap(allAttrsByFieldName);
    }

    
    /* Attribute keys. */

    /**
     * Constants for all attribute keys of the {@link ${sourceType.qualifiedName}} component.
     */
    public static class Keys #if ($superBindableDescriptor) extends ${superBindableDescriptor}.Keys #end#**#
    {
        protected Keys() {} 

#foreach ($attr in $ownFields)
        /** Attribute key for: {@link ${attr.declaringClass}#${attr.field.simpleName}}. */
        public static final String $methodutils.asConstant($attr.field.simpleName.toString()) = "${esc.java($attr.key)}";
#end
    }


    /* Attribute descriptors. */

    /**
     * All attributes of the {@link ${sourceType.qualifiedName}} component.
     */
    public static final class Attributes
    {
        private Attributes() { /* No public instances. */ }

#foreach ($attr in $ownFields)
        /**
         * $!{$attr.javaDoc}#if ($attr.inherited)#* *#
         * 
         * @see $attr.inherited.declaringClass#$attr.inherited.field.simpleName
#end
         */
        public final AttributeInfo ${attr.field.simpleName} = 
            new AttributeInfo(
                "${esc.java($attr.key)}",
                "${esc.java($attr.declaringClass)}",
                "${esc.java($attr.field.simpleName)}",
                #stringOrNull($attr.javaDoc),
                #stringOrNull($attr.label),
                #stringOrNull($attr.title),
                #stringOrNull($attr.description),
                #stringOrNull($attr.group),
                #if ($attr.level)org.carrot2.util.attribute.AttributeLevel.${attr.level.toString().toUpperCase()}#else#* *#null#end,
                #if ($attr.inherited)${attr.inherited.descriptorClass}.attributes.${attr.inherited.field.simpleName}#else#* *#null#end#* *#
            );

#end

#foreach ($i in $nestedFields)
        /**
         * Attributes of the nested {@link ${i.fieldElement}} component.
         */
        public final ${i.descriptorClass}.Attributes ${i.field.simpleName} =
            ${i.descriptorClass}.attributes;

#end
    }

    /**
     * Attribute map builder for the  {@link ${sourceType.qualifiedName}} component. You can use this
     * builder as a type-safe alternative to populating the attribute map using attribute keys.
     */
    public static class AttributeBuilder #if ($superBindableDescriptor) extends ${superBindableDescriptor}.AttributeBuilder #end#**#
    {
        /** The attribute map populated by this builder. */
        public final Map<String, Object> map;

        /**
         * Creates a builder backed by the provided map.
         */
        protected AttributeBuilder(Map<String, Object> map)
        {
            #if ($superBindableDescriptor) super(map); #end#**#
            this.map = map;
        }

#foreach ($i in $ownFields)

        #* Generate exact type setter for @Input attributes. *#
        #if ($i.input)#**#
        /**
         * $!{i.javaDoc}
         * 
         * @see ${i.declaringClass}#${i.field.simpleName} 
         */
        public AttributeBuilder ${i.field.simpleName}($i.type value)
        {
            map.put("$i.key", value);
            return this;
        }
        #end

        #* Generate type-class setter for @Input attributes that are references. *#
        #if ($i.generatesClassSetter)#**#
        /**
         * $!{i.javaDoc}
         * 
         * @see ${i.declaringClass}#${i.field.simpleName}
         */
        public AttributeBuilder ${i.field.simpleName}(Class<? extends $i.type> clazz)
        {
            map.put("$i.key", clazz);
            return this;
        }
        #end

        #* Generate getter for @Output attributes. *#
        #if ($i.output)#**#
        /**
         * $!{i.javaDoc}
         * 
         * @see ${i.declaringClass}#${i.field.simpleName} 
         */
        public $i.type ${i.field.simpleName}()
        {
            return ($i.boxedType) map.get("$i.key");
        }
        #end        
#end

#foreach ($i in $nestedFields)
        /**
         * Returns an attribute builder for the nested
         * {@link ${i.fieldElement}} component, backed by the same attribute map
         * as the current builder.
         */
        public ${i.descriptorClass}.AttributeBuilder ${i.field.simpleName}()
        {
            return ${i.descriptorClass}.attributeBuilder(map);
        }

#end
    }

    /**
     * Creates an attribute map builder for the component. You can use this
     * builder as a type-safe alternative to populating the attribute map using attribute keys.
     * 
     * @param attributeValues An existing map which should be used to collect attribute values. 
     *        Attribute values set by this builder will be added to the provided map, overwriting
     *        previously defined mappings, if any.
     */
    public static AttributeBuilder attributeBuilder(Map<String, Object> attributeValues)
    {
        return new AttributeBuilder(attributeValues);
    }
    
    /* IBindableDescriptor */

    @Override 
    public String getPrefix()
    {
        return prefix;
    }

    @Override 
    public String getTitle()
    {
        return title;
    }
    
    @Override 
    public String getLabel()      
    { 
        return label;
    }
    
    @Override 
    public String getDescription() 
    { 
        return description; 
    }

    @Override 
    public Set<AttributeInfo> getOwnAttributes()
    { 
        return ownAttributes;
    }

    @Override 
    public Set<AttributeInfo> getAttributes()
    {
        return allAttributes;
    }

    @Override 
    public Map<String, AttributeInfo> getAttributesByKey()
    {
        return allAttributesByKey;
    }

    @Override 
    public Map<String, AttributeInfo> getAttributesByFieldName()
    {
        return allAttributesByFieldName;
    }
}
