<?xml version="1.0" encoding="UTF-8" ?>

<project name="Carrot2 main build file" default="help">
  <property file="${user.home}/.carrot.properties" />
  <property file="local-build.properties" />

  <property name="release.number"   value="2.0.2" />

  <property name="build.compiler"   value="modern" />
  <property name="javac.optimize"   value="off" />
  <property name="javac.debug"      value="on" />

  <!-- ## override these properties in your local property
       ## file if you want to change your deployment
       ## host (these replace tokens in descriptors)
       ## You can override distribution.dir to point to your tomcat's webapps
       ## folder, for example. -->
  <property name="distribution.dir" value="tmp" />
  <property name="tests.report.dir" value="tmp/test-report" />

  <property name="carrot2.cvs.dir" location="${basedir}" />
  <import file="${carrot2.cvs.dir}/components/carrot2-ant-extensions/bootstrap.xml" />

  <!-- Load ant-contrib task library -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath location="${carrot2.cvs.dir}/lib/ant-extensions/ant-contrib.jar" />
  </taskdef>

  <property name="javadoc.dir" location="tmp/javadoc" />

  <target name="javadoc">

    <delete dir="${javadoc.dir}" failonerror="false" />
    <delete dir="tmp/src" failonerror="false" />

    <mkdir dir="tmp/src" />
    <mkdir dir="${javadoc.dir}" />

    <copy failonerror="true" filtering="false" overwrite="true" todir="tmp/src">
        <fileset dir=".">
            <include name="**/src/**/*.java" />
            <include name="**/src/**/*.html" />
            <exclude name="**/tmp/**/*" />
        </fileset>
        <chainedmapper>
            <filtermapper><replacestring from="\" to="/"/></filtermapper>
            <mapper type="regexp" from="^(.+)/src/(.+)" to="\2"/>
        </chainedmapper>
    </copy>

    <javadoc
             destdir          = "${javadoc.dir}"
             access           = "package"
             version          = "true"
             use              = "false"
             doctitle         = "Carrot&lt;sup&gt;2&lt;/sup&gt; Framework API Specification"
             header           = "&lt;div class='logo'&gt;Carrot&lt;sup&gt;2&lt;/sup&gt; Framework&lt;br&gt;API Specification&lt;/div&gt;"
             footer           = "&lt;div class='logo'&gt;Please refer to project documentation at &lt;br&gt;&lt;a target='_top' href=http://project.carrot2.org&gt;http://project.carrot2.org&lt;/a&gt;&lt;/div&gt;"
             bottom           = "&lt;center&gt;Copyright (c) Dawid Weiss, Stanislaw Osinski &lt;/center&gt;"
             failonerror      = "true"
             stylesheetfile   = "${carrot2.cvs.dir}/etc/javadoc/stylesheet.css"
             useexternalfile  = "true"
    >
        <classpath>
            <fileset dir=".">
                <include name="**/lib/*.jar" />
                <include name="lib/**/*.jar" />
            </fileset>
        </classpath>

        <fileset dir="tmp/src">
            <include name="**/*.java" />
        </fileset>

        <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" 
            packagelistLoc="${carrot2.cvs.dir}/etc/javadoc/apis/jdk15" />
        <link offline="true" href="http://demo.carrot2.org/thirdparty/ant/" 
            packagelistLoc="${carrot2.cvs.dir}/etc/javadoc/apis/ant" />

        <link href="http://www.dom4j.org/apidocs/" />
        <link href="http://dsd.lbl.gov/~hoschek/colt/api/" />

        <group title="Carrot&lt;sup&gt;2&lt;/sup&gt; Core" packages="org.carrot2.core*" />
        <group title="Carrot&lt;sup&gt;2&lt;/sup&gt; ANT Build System" packages="org.carrot2.ant*"/>
        <group title="Carrot&lt;sup&gt;2&lt;/sup&gt; Demos and Examples" packages="org.carrot2.apiexample*:org.carrot2.demo*:org.carrot2.webapp*"/>
        <group title="Carrot&lt;sup&gt;2&lt;/sup&gt; Filters" packages="org.carrot2.filter*"/>
        <group title="Carrot&lt;sup&gt;2&lt;/sup&gt; Inputs" packages="org.carrot2.input*"/>
        <group title="Carrot&lt;sup&gt;2&lt;/sup&gt; Utility classes" packages="org.carrot2.matrix*:org.carrot2.stemming*:org.carrot2.tools*:org.carrot2.util*"/>
    </javadoc>

    <delete dir="tmp/src" />
    <copy todir="${javadoc.dir}">
      <fileset dir="${carrot2.cvs.dir}/etc/javadoc/">
        <include name="*.gif" />
      </fileset>
    </copy>
  </target>

  <target name="build" depends="bootstrap,bootstrap:dependencies">
  	<description>
	Builds all components included in 'apply-to-components'
	target.
	</description>

    <macrodef name="component-apply">
      <attribute name="component.path"/>
      <sequential>
        <echo>
################################################################
BUILDING: @{component.path}
################################################################
        </echo>
        <ant antfile="build.xml" dir="@{component.path}" inheritall="false" target="build">
             <reference refid="dependencies" />
             <reference refid="c2.tasks.classloader" />
             <property name="cache:deps" value="${cache:deps}" />
        </ant>
      </sequential>
    </macrodef>
    <antcall target="apply-to-components">
         <reference refid="dependencies" />
         <reference refid="c2.tasks.classloader" />
         <param name="cache:deps" value="${cache:deps}" />
    </antcall>
    
    <macrodef name="application-apply">
        <attribute name="application.path" />
        <sequential>
            <component-apply component.path="@{application.path}" />
        </sequential>
    </macrodef>
    <antcall target="apply-to-applications">
         <reference refid="dependencies" />
         <reference refid="c2.tasks.classloader" />
         <param name="cache:deps" value="${cache:deps}" />
    </antcall>
  </target>



  <target name="dist" depends="bootstrap,bootstrap:dependencies">
    <delete dir="dist" failonerror="false" />
    <mkdir dir="dist" />

    <!-- compile desktop demo -->
    <ant antfile="build.xml" dir="applications/carrot2-demo-browser"
        inheritall="false" inheritrefs="false" target="dist">
        <property name="distribution.zips.dir" location="dist" />
        <property name="distribution.zip.name" value="carrot2-demo-browser-${release.number}.zip" />
        <reference refid="dependencies" />
        <reference refid="c2.tasks.classloader" />
        <property name="cache:deps" value="${cache:deps}" />
    </ant>
    <zip zipfile="dist/carrot2-demo-browser-${release.number}.zip" update="true">
        <zipfileset file="doc/history.txt" fullpath="changes.txt" />
    </zip>

    <!-- compile the web application demo -->
    <mkdir dir="dist/webapp" />
    <copy todir="dist/webapp">
        <fileset dir="etc/conf-tomcat">
            <include name="**/*" />
        </fileset>
    </copy>
    <copy file="doc/history.txt" tofile="dist/webapp/changes.txt" />
    <ant antfile="build.xml" dir="applications/carrot2-demo-webapp"
        inheritall="false" inheritrefs="false" target="build">
        <reference refid="dependencies" />
        <reference refid="c2.tasks.classloader" />
        <property name="cache:deps" value="${cache:deps}" />
    </ant>
    <copy todir="dist/webapp">
    	<fileset dir="applications/carrot2-demo-webapp/tmp/dist" includes="*.war" />
    </copy>
    <zip basedir="dist/webapp" 
        zipfile="dist/carrot2-demo-webapp-${release.number}.zip" />
    <delete dir="dist/webapp" />
  </target>



  <target name="clean" >
  	<description>
	Cleans intermediate files of all
	components included in 'apply-to-components'
	target.
	</description>

    <macrodef name="component-apply">
      <attribute name="component.path"/>
      <sequential>
        <echo>
CLEANING: @{component.path}
        </echo>
        <ant antfile="build.xml"
             dir="@{component.path}" inheritall="false"
             target="clean" />
      </sequential>
    </macrodef>
    <antcall target="apply-to-components" />
    
    <macrodef name="application-apply">
        <attribute name="application.path" />
        <sequential>
            <component-apply component.path="@{application.path}" />
        </sequential>
    </macrodef>
    <antcall target="apply-to-applications" />
    
    <delete dir="tmp" />
    <delete dir="dist" />
  </target>



  <target name="cleanall">
  	<description>
	Cleans all intermediate files of all
	components included in 'apply-to-components'
	target.
	</description>

    <macrodef name="component-apply">
      <attribute name="component.path"/>
      <sequential>
        <echo>
CLEANING: @{component.path}
        </echo>
        <ant antfile="build.xml"
             dir="@{component.path}" inheritall="false"
             target="cleanall" />
      </sequential>
    </macrodef>
    <antcall target="apply-to-components" />

    <macrodef name="application-apply">
        <attribute name="application.path" />
        <sequential>
            <component-apply component.path="@{application.path}" />
        </sequential>
    </macrodef>
    <antcall target="apply-to-applications" />
    
    <delete dir="tmp" />
    <delete dir="dist" />
  </target>



  <target name="test" depends="bootstrap,bootstrap:dependencies">
  	<description>
	Runs test task for all
	components included in 'apply-to-components'
	target.
	</description>

    <property name="tests.failure.marker" location=".test-failure" />

    <macrodef name="component-apply">
      <attribute name="component.path"/>
      <sequential>
        <echo>
TESTING: @{component.path}
        </echo>
        <ant antfile="build.xml" dir="@{component.path}" inheritall="false" target="test">
            <property name="tests.failure.marker" location="${tests.failure.marker}" />
            <reference refid="dependencies" />
            <reference refid="c2.tasks.classloader" />
            <property name="cache:deps" value="${cache:deps}" />
        </ant>
      </sequential>
    </macrodef>

    <delete failonerror="false" file="${tests.failure.marker}" />
    <antcall target="apply-to-components">
         <reference refid="dependencies" />
         <reference refid="c2.tasks.classloader" />
         <param name="cache:deps" value="${cache:deps}" />
    </antcall>
    
    <!-- Generate one report for all components -->
    <antcall target="test.report">
         <reference refid="dependencies" />
         <reference refid="c2.tasks.classloader" />
         <param name="cache:deps" value="${cache:deps}" />
    </antcall>

    <if>
        <available file="${tests.failure.marker}" type="file" />
        <then>
            <fail>Component tests failed.</fail>
        </then>
    </if>
  </target>


  <target name="test.report">
    <delete dir="${tests.report.dir}" failonerror="false" />
    <mkdir dir="${tests.report.dir}" />
    <junitreport todir="${tests.report.dir}">
        <fileset dir=".">
            <include name="**/junit-temp/TEST-*.xml"/>
        </fileset>
        <report format="frames" todir="${tests.report.dir}"/>
    </junitreport>
  </target>


  <target name="apply-to-applications">
    <application-apply application.path="applications/carrot2-demo-browser" />
    <application-apply application.path="applications/carrot2-demo-webapp" />
    <application-apply application.path="applications/carrot2-nutch-plugin" />
    <application-apply application.path="applications/carrot2-odp-tools" />
    <application-apply application.path="applications/carrot2-demo-api-example" />
  </target>



  <target name="apply-to-components">
  	<description>
	Add components that compile here.
	</description>

    <component-apply component.path="components/carrot2-ant-extensions" />
    <component-apply component.path="components/carrot2-local-core" />
    <component-apply component.path="components/carrot2-util-common" />
    <component-apply component.path="components/carrot2-util-tokenizer" />
    <component-apply component.path="components/carrot2-util-matrix" />
    <component-apply component.path="components/carrot2-util-lang-guesser" />
    <component-apply component.path="components/carrot2-util-gzip" />

    <component-apply component.path="components/carrot2-input-xml" />
    <component-apply component.path="components/carrot2-input-lucene" />
    <component-apply component.path="components/carrot2-input-googleapi" />
    <component-apply component.path="components/carrot2-input-yahooapi" />
    <component-apply component.path="components/carrot2-input-opensearch" />
    <component-apply component.path="components/carrot2-input-msnapi" />

    <component-apply component.path="components/carrot2-odp-core" />

    <component-apply component.path="components/carrot2-stemmer-stempelator" />
    <component-apply component.path="components/carrot2-stemmer-stempel" />
    <component-apply component.path="components/carrot2-stemmer-snowball" />

    <component-apply component.path="components/carrot2-filter-case-normalizer" />
    <component-apply component.path="components/carrot2-filter-lingo" />
    <component-apply component.path="components/carrot2-filter-fuzzyants" />
    <component-apply component.path="components/carrot2-filter-haog" />
    <component-apply component.path="components/carrot2-filter-stc" />
    <component-apply component.path="components/carrot2-filter-trc" />
  </target>



  <target name="license" depends="bootstrap" description="Update/ add licensing info to source code files. ONLY FOR PACKAGE MAINTAINER.">
	<condition property="cond:is.maintainer">
		<equals arg1="${user.name}" arg2="dawid weiss" casesensitive="false" trim="true" />
	</condition>

	<fail unless="cond:is.maintainer">
	### ERROR: TARGET FOR USE ONLY BY PACKAGE MAINTAINER.
	</fail>

    <loadfile encoding="UTF-8" property="carrot2.license" srcfile="etc/codeconvention/header.txt" />
    <loadfile encoding="UTF-8" property="carrot2.ccg.license" srcfile="etc/codeconvention/header-ccg.txt" />
    <loadfile encoding="UTF-8" property="carrot2.generated.code" srcfile="etc/codeconvention/header-generated.txt" />

    <licenseReplace encoding="UTF-8" saveExtension="">
        <fileset dir=".">
            <include name="**/*.java" />
            <exclude name="**/tmp/**" />
        </fileset>

        <!-- Order matters - first come, first served. -->
        <header contains="Sponsored by: CCG, Inc." 
                replacement="${carrot2.ccg.license}" />
        <header contains="http://www.carrot2.org/carrot2.LICENSE"
                replacement="${carrot2.license}" />

        <!-- Replace generated headers with a simple statement -->
        <header contains="${carrot2.generated.code}"           replacement="${carrot2.generated.code}" />
        <header contains="http://www.castor.org"               replacement="${carrot2.generated.code}" />
        <header contains="The following code was generated by" replacement="${carrot2.generated.code}" />
        <header contains="Generated By:JavaCC"                 replacement="${carrot2.generated.code}" />
        <header contains="generated automatically by the Snowball to Java" replacement="${carrot2.generated.code}" />
        <header contains="This file was auto-generated from WSDL" replacement="${carrot2.generated.code}" />

        <!-- Replace empty headers with C2 license -->
        <header isempty="true"
                replacement="${carrot2.license}" />
    </licenseReplace>

    <licenseList header="true" footer="true" encoding="UTF-8" verbose="false">
        <fileset dir=".">
            <include name="**/*.java" />
            <exclude name="**/tmp/**" />
        </fileset>
    </licenseList>
  </target>


  <target name="help">
    <echo>
Available targets:

build     - builds all components in all profiles.

clean     - removes intermediate files. 

cleanall  - remove Eclipse files in addition to clean.

javadoc   - creates JavaDoc documentation.

Available properties (enabled with -Dproperty.name=true)

copy.dependencies  - Creates a subfolder in a distribution
       directory of a component with all components and
       libraries that it requires. Only suggested for use
       with 'build' target.

single.jar - used in conjunction with 'copy.dependencies'.
       if 'true', Carrot2 components are repacked into a
       single JAR. 'true' by default.
    </echo>
  </target>

</project>
