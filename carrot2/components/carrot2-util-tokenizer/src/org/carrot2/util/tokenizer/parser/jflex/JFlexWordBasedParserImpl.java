/* The following code was generated by JFlex 1.4.1 on 12.09.07 19:08 */

package org.carrot2.util.tokenizer.parser.jflex;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 12.09.07 19:08 from the specification file
 * <tt>E:/repositories/carrot/sourceforge.net/trunk/carrot2/components/carrot2-util-tokenizer/src/org/carrot2/util/tokenizer/parser/jflex/JFlexWordBasedParserImpl.jflex</tt>
 */
class JFlexWordBasedParserImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\011\000\001\000\001\024\001\000\001\000\001\023\022\000\001\000\001\046\001\000"+
    "\001\047\001\000\001\040\001\037\001\030\004\000\001\043\001\032\001\033\001\042"+
    "\012\026\001\035\001\034\001\000\001\040\001\000\001\041\001\036\032\050\004\000"+
    "\001\031\001\000\001\021\001\014\001\016\001\012\001\011\001\005\001\007\001\045"+
    "\001\002\002\050\001\003\001\001\001\004\001\006\001\022\001\050\001\017\001\044"+
    "\001\020\001\013\001\010\003\050\001\015\105\000\027\025\001\000\037\025\001\000"+
    "\u0568\025\012\027\206\025\012\027\u026c\025\012\027\166\025\012\027\166\025\012\027"+
    "\166\025\012\027\166\025\012\027\167\025\011\027\166\025\012\027\166\025\012\027"+
    "\166\025\012\027\340\025\012\027\166\025\012\027\u0166\025\012\027\u0fb6\025\u1040\000"+
    "\u0150\025\u0170\000\200\025\200\000\u092e\025\u10d2\000\u5200\025\u0c00\000\u2ba4\025\u215c\000"+
    "\u0200\025\u0500\000";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\001\000\001\001\003\002\001\001\002\003\001\004\001\005\001\001"+
    "\003\002\001\000\002\006\001\002\002\000\002\002\001\003\001\006"+
    "\002\000\001\006\001\002\001\000\001\002\001\000\002\002\001\007"+
    "\012\006\001\010\001\011\002\002\001\003\012\006\005\003\002\002"+
    "\001\000\001\002\001\000\002\012\001\011\010\012\002\000\001\003"+
    "\001\011\002\002\001\007\001\006\003\013\002\006\001\000\002\013"+
    "\002\002\012\006\001\010\001\000\002\003\005\000\002\013";

  private static int [] zzUnpackAction() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\000\000\000\051\000\122\000\173\000\244\000\315\000\366\000\u011f"+
    "\000\051\000\u0148\000\u0171\000\u019a\000\u01c3\000\u01ec\000\u0215\000\u023e"+
    "\000\u0267\000\u0290\000\u02b9\000\u02e2\000\u030b\000\u0334\000\u035d\000\u0386"+
    "\000\u03af\000\u03d8\000\u0401\000\u042a\000\u0453\000\u047c\000\u04a5\000\u04ce"+
    "\000\u04f7\000\u0520\000\u0549\000\u0572\000\u059b\000\u05c4\000\u05ed\000\u0616"+
    "\000\u063f\000\u0668\000\u0691\000\u06ba\000\u06e3\000\u070c\000\u0215\000\u0735"+
    "\000\u075e\000\u0787\000\u07b0\000\u07d9\000\u0802\000\u082b\000\u0854\000\u087d"+
    "\000\u08a6\000\u08cf\000\u08f8\000\u0921\000\u094a\000\u0973\000\u099c\000\u09c5"+
    "\000\u09ee\000\u0a17\000\u0a40\000\u0a69\000\u0a92\000\u0abb\000\u0ae4\000\u0290"+
    "\000\u0b0d\000\u0b36\000\u0b5f\000\u0b88\000\u0bb1\000\u0bda\000\u0c03\000\u0c2c"+
    "\000\u0c55\000\u0c7e\000\u0ca7\000\u042a\000\u0cd0\000\u0cf9\000\u0d22\000\u0abb"+
    "\000\u0d4b\000\u0d74\000\u0d9d\000\u0dc6\000\u0def\000\u0e18\000\u0e41\000\u0e6a"+
    "\000\u0e93\000\u0ebc\000\u0ee5\000\u0f0e\000\u0f37\000\u0f60\000\u0f89\000\u0fb2"+
    "\000\u0fdb\000\u1004\000\u102d\000\u1056\000\u107f\000\u10a8\000\u10d1\000\u10fa"+
    "\000\u1123\000\u114c\000\u1175\000\u119e\000\u11c7\000\u11f0\000\u1219";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\001\002\001\003\003\004\001\005\015\004\001\006\001\002\001\004"+
    "\001\007\001\010\001\011\001\002\001\011\002\012\001\011\001\002"+
    "\001\013\001\002\001\012\001\002\001\011\001\004\001\014\001\012"+
    "\001\002\001\004\052\000\020\015\001\016\001\015\002\000\003\015"+
    "\001\017\001\020\001\021\001\022\002\000\001\023\001\024\004\000"+
    "\001\025\001\015\002\000\001\015\001\000\022\015\002\000\003\015"+
    "\001\017\001\020\001\021\001\022\002\000\001\023\001\024\004\000"+
    "\001\025\001\015\002\000\001\015\001\000\017\015\001\026\002\015"+
    "\002\000\003\015\001\017\001\020\001\021\001\022\002\000\001\023"+
    "\001\024\004\000\001\025\001\015\002\000\001\015\024\000\001\002"+
    "\025\000\022\015\002\000\001\015\001\007\001\027\001\000\001\020"+
    "\001\030\001\031\001\000\001\032\001\023\003\000\002\032\002\015"+
    "\002\000\001\015\001\000\022\015\002\000\001\015\002\027\001\017"+
    "\001\020\001\033\001\034\001\000\001\032\001\023\001\024\002\000"+
    "\002\032\001\025\001\015\002\000\001\015\033\000\002\012\004\000"+
    "\001\012\004\000\001\012\003\000\022\035\003\000\001\035\015\000"+
    "\002\035\001\000\002\035\001\000\017\015\001\036\002\015\002\000"+
    "\003\015\001\017\001\020\001\021\001\022\002\000\001\023\001\024"+
    "\004\000\001\025\001\015\002\000\001\015\001\000\022\015\002\000"+
    "\003\015\001\017\001\020\001\021\001\037\002\000\001\023\001\024"+
    "\004\000\001\025\001\015\002\000\001\015\001\000\001\015\001\040"+
    "\020\015\002\000\003\015\001\017\001\020\001\021\001\037\002\000"+
    "\001\023\001\024\004\000\001\025\001\015\002\000\001\015\001\000"+
    "\022\041\002\000\001\041\001\000\001\041\014\000\002\041\002\000"+
    "\001\041\001\000\022\020\002\000\003\020\001\000\002\020\001\037"+
    "\002\000\001\023\005\000\002\020\002\000\001\020\001\000\022\042"+
    "\002\000\001\042\001\021\001\042\001\000\002\020\001\037\002\000"+
    "\001\023\005\000\002\042\002\000\001\042\001\000\001\043\001\044"+
    "\001\045\001\046\001\045\001\047\001\050\001\045\001\051\002\045"+
    "\001\052\001\045\001\053\002\045\001\054\001\045\002\000\001\045"+
    "\001\020\001\045\014\000\002\045\002\000\001\045\001\000\022\055"+
    "\002\000\003\055\014\000\002\055\002\000\001\055\001\000\022\056"+
    "\002\000\001\056\001\024\001\056\014\000\002\056\002\000\001\056"+
    "\001\000\022\015\002\000\003\015\001\057\001\020\001\021\001\037"+
    "\002\000\001\023\001\024\004\000\001\025\001\015\002\000\001\015"+
    "\001\000\021\015\001\060\002\000\003\015\001\017\001\020\001\021"+
    "\001\037\002\000\001\023\001\024\004\000\001\025\001\015\002\000"+
    "\001\015\001\000\022\015\002\000\001\015\002\027\001\017\001\020"+
    "\001\033\001\031\001\000\001\032\001\023\001\024\002\000\002\032"+
    "\001\025\001\015\002\000\001\015\001\000\022\020\002\000\001\020"+
    "\002\061\001\000\002\020\001\037\002\000\001\023\005\000\002\020"+
    "\002\000\001\020\001\000\001\062\001\063\001\064\001\065\001\064"+
    "\001\066\001\067\001\064\001\070\002\064\001\071\001\064\001\072"+
    "\002\064\001\073\001\064\002\000\001\064\001\061\001\074\014\000"+
    "\002\064\002\000\001\064\026\000\002\075\022\000\022\042\002\000"+
    "\001\042\001\076\001\077\001\000\002\020\001\037\002\000\001\023"+
    "\005\000\002\042\002\000\001\042\001\000\001\043\001\044\001\045"+
    "\001\046\001\045\001\047\001\050\001\045\001\051\002\045\001\052"+
    "\001\045\001\053\002\045\001\054\001\045\002\000\001\045\001\061"+
    "\001\100\014\000\002\045\002\000\001\045\001\000\022\035\003\000"+
    "\001\035\005\000\001\002\007\000\002\035\001\000\002\035\001\000"+
    "\017\015\001\101\002\015\002\000\003\015\001\017\001\020\001\021"+
    "\001\037\002\000\001\023\001\024\004\000\001\025\001\015\002\000"+
    "\001\015\001\000\001\062\001\063\001\064\001\065\001\064\001\066"+
    "\001\067\001\064\001\070\002\064\001\071\001\064\001\072\002\064"+
    "\001\073\001\064\002\000\001\064\001\020\001\064\014\000\002\064"+
    "\002\000\001\064\001\000\002\015\001\102\017\015\002\000\003\015"+
    "\001\017\001\020\001\021\001\037\002\000\001\023\001\024\004\000"+
    "\001\025\001\015\002\000\001\015\001\000\022\041\002\000\003\041"+
    "\001\017\001\000\001\103\004\000\001\024\004\000\001\104\001\041"+
    "\002\000\001\041\001\000\022\042\002\000\003\042\001\105\001\020"+
    "\001\021\001\037\002\000\001\023\005\000\002\042\002\000\001\042"+
    "\001\000\001\106\001\107\020\106\002\000\001\106\001\020\001\106"+
    "\001\000\002\020\001\110\002\000\001\023\005\000\002\106\002\000"+
    "\001\106\001\000\003\106\001\111\016\106\002\000\001\106\001\020"+
    "\001\106\001\000\002\020\001\110\002\000\001\023\005\000\002\106"+
    "\002\000\001\106\001\000\022\106\002\000\001\106\001\020\001\106"+
    "\001\000\002\020\001\110\002\000\001\023\005\000\002\106\002\000"+
    "\001\106\001\000\010\106\001\112\011\106\002\000\001\106\001\020"+
    "\001\106\001\000\002\020\001\110\002\000\001\023\005\000\002\106"+
    "\002\000\001\106\001\000\016\106\001\113\003\106\002\000\001\106"+
    "\001\020\001\106\001\000\002\020\001\110\002\000\001\023\005\000"+
    "\002\106\002\000\001\106\001\000\005\106\001\114\014\106\002\000"+
    "\001\106\001\020\001\106\001\000\002\020\001\110\002\000\001\023"+
    "\005\000\002\106\002\000\001\106\001\000\011\106\001\115\010\106"+
    "\002\000\001\106\001\020\001\106\001\000\002\020\001\110\002\000"+
    "\001\023\005\000\002\106\002\000\001\106\001\000\001\106\001\116"+
    "\020\106\002\000\001\106\001\020\001\106\001\000\002\020\001\110"+
    "\002\000\001\023\005\000\002\106\002\000\001\106\001\000\005\106"+
    "\001\117\014\106\002\000\001\106\001\020\001\106\001\000\002\020"+
    "\001\110\002\000\001\023\005\000\002\106\002\000\001\106\001\000"+
    "\016\106\001\120\003\106\002\000\001\106\001\020\001\106\001\000"+
    "\002\020\001\110\002\000\001\023\005\000\002\106\002\000\001\106"+
    "\001\000\022\055\002\000\003\055\001\000\002\055\001\023\010\000"+
    "\002\055\002\000\001\055\001\000\022\056\002\000\003\056\001\121"+
    "\006\000\001\024\004\000\002\056\002\000\001\056\001\000\022\015"+
    "\002\000\003\015\001\017\001\020\001\021\001\037\001\000\001\122"+
    "\001\023\001\024\004\000\001\025\001\015\002\000\001\015\001\000"+
    "\022\020\002\000\001\020\002\061\001\000\001\020\001\030\001\031"+
    "\001\000\001\032\001\023\003\000\002\032\002\020\002\000\001\020"+
    "\001\000\001\106\001\107\020\106\002\000\001\106\001\020\001\106"+
    "\001\000\002\020\001\037\002\000\001\023\005\000\002\106\002\000"+
    "\001\106\001\000\003\106\001\111\016\106\002\000\001\106\001\020"+
    "\001\106\001\000\002\020\001\037\002\000\001\023\005\000\002\106"+
    "\002\000\001\106\001\000\022\106\002\000\001\106\001\020\001\106"+
    "\001\000\002\020\001\037\002\000\001\023\005\000\002\106\002\000"+
    "\001\106\001\000\010\106\001\112\011\106\002\000\001\106\001\020"+
    "\001\106\001\000\002\020\001\037\002\000\001\023\005\000\002\106"+
    "\002\000\001\106\001\000\016\106\001\113\003\106\002\000\001\106"+
    "\001\020\001\106\001\000\002\020\001\037\002\000\001\023\005\000"+
    "\002\106\002\000\001\106\001\000\005\106\001\114\014\106\002\000"+
    "\001\106\001\020\001\106\001\000\002\020\001\037\002\000\001\023"+
    "\005\000\002\106\002\000\001\106\001\000\011\106\001\115\010\106"+
    "\002\000\001\106\001\020\001\106\001\000\002\020\001\037\002\000"+
    "\001\023\005\000\002\106\002\000\001\106\001\000\001\106\001\116"+
    "\020\106\002\000\001\106\001\020\001\106\001\000\002\020\001\037"+
    "\002\000\001\023\005\000\002\106\002\000\001\106\001\000\005\106"+
    "\001\117\014\106\002\000\001\106\001\020\001\106\001\000\002\020"+
    "\001\037\002\000\001\023\005\000\002\106\002\000\001\106\001\000"+
    "\016\106\001\120\003\106\002\000\001\106\001\020\001\106\001\000"+
    "\002\020\001\037\002\000\001\023\005\000\002\106\002\000\001\106"+
    "\001\000\022\106\002\000\001\106\001\061\001\123\001\000\001\020"+
    "\001\030\001\031\001\000\001\032\001\023\003\000\002\032\002\106"+
    "\002\000\001\106\026\000\002\075\002\000\002\032\001\000\001\032"+
    "\004\000\002\032\006\000\022\042\002\000\001\042\001\076\001\077"+
    "\001\000\001\020\001\030\001\031\001\000\001\032\001\023\003\000"+
    "\002\032\002\042\002\000\001\042\001\000\022\042\002\000\001\042"+
    "\002\077\001\105\001\020\001\033\001\031\001\000\001\032\001\023"+
    "\003\000\002\032\002\042\002\000\001\042\001\000\022\106\002\000"+
    "\001\106\001\061\001\123\001\000\001\020\001\030\001\124\001\000"+
    "\001\032\001\023\003\000\002\032\002\106\002\000\001\106\001\000"+
    "\021\015\001\125\002\000\003\015\001\017\001\020\001\021\001\037"+
    "\002\000\001\023\001\024\004\000\001\025\001\015\002\000\001\015"+
    "\001\000\017\015\001\126\002\015\002\000\003\015\001\017\001\020"+
    "\001\021\001\037\002\000\001\023\001\024\004\000\001\025\001\015"+
    "\002\000\001\015\001\000\022\127\002\000\001\127\001\103\001\127"+
    "\014\000\002\127\002\000\001\127\001\000\022\041\002\000\003\041"+
    "\001\057\001\000\001\103\004\000\001\024\004\000\001\104\001\041"+
    "\002\000\001\041\001\000\022\127\002\000\001\127\001\000\001\127"+
    "\014\000\002\127\002\000\001\127\001\000\022\130\002\000\003\130"+
    "\001\000\001\130\001\020\001\131\002\132\001\133\004\132\001\000"+
    "\002\130\002\000\001\130\001\000\002\130\001\106\017\130\002\000"+
    "\003\130\001\000\001\130\001\020\001\131\002\132\001\133\004\132"+
    "\001\000\002\130\002\000\001\130\001\000\004\130\001\134\015\130"+
    "\002\000\003\130\001\000\001\130\001\020\001\131\002\132\001\133"+
    "\004\132\001\000\002\130\002\000\001\130\001\000\017\130\001\106"+
    "\002\130\002\000\003\130\001\000\001\130\001\020\001\131\002\132"+
    "\001\133\004\132\001\000\002\130\002\000\001\130\001\000\006\130"+
    "\001\106\013\130\002\000\003\130\001\000\001\130\001\020\001\131"+
    "\002\132\001\133\004\132\001\000\002\130\002\000\001\130\001\000"+
    "\007\130\001\106\012\130\002\000\003\130\001\000\001\130\001\020"+
    "\001\131\002\132\001\133\004\132\001\000\002\130\002\000\001\130"+
    "\001\000\012\130\001\106\007\130\002\000\003\130\001\000\001\130"+
    "\001\020\001\131\002\132\001\133\004\132\001\000\002\130\002\000"+
    "\001\130\001\000\014\130\001\106\005\130\002\000\003\130\001\000"+
    "\001\130\001\020\001\131\002\132\001\133\004\132\001\000\002\130"+
    "\002\000\001\130\001\000\001\106\021\130\002\000\003\130\001\000"+
    "\001\130\001\020\001\131\002\132\001\133\004\132\001\000\002\130"+
    "\002\000\001\130\001\000\021\130\001\135\002\000\003\130\001\000"+
    "\001\130\001\020\001\131\002\132\001\133\004\132\001\000\002\130"+
    "\002\000\001\130\001\000\022\056\002\000\001\056\001\000\001\056"+
    "\014\000\002\056\002\000\001\056\042\000\001\136\007\000\022\130"+
    "\002\000\001\130\002\123\001\000\001\130\001\030\001\137\001\132"+
    "\001\140\001\133\003\132\001\140\001\032\002\130\002\000\001\130"+
    "\001\000\022\015\002\000\003\015\001\017\001\020\001\021\001\037"+
    "\001\000\001\122\001\023\001\024\004\000\001\141\001\015\002\000"+
    "\001\015\001\000\005\015\001\142\014\015\002\000\003\015\001\017"+
    "\001\020\001\021\001\037\002\000\001\023\001\024\004\000\001\025"+
    "\001\015\002\000\001\015\001\000\022\127\002\000\003\127\001\105"+
    "\001\000\001\103\011\000\002\127\002\000\001\127\001\000\001\143"+
    "\001\144\001\145\001\146\001\145\001\147\001\150\001\145\001\151"+
    "\002\145\001\152\001\145\001\153\002\145\001\154\001\145\002\000"+
    "\001\145\001\130\001\145\001\000\001\132\001\000\010\132\001\000"+
    "\002\145\002\000\001\145\001\000\022\132\002\000\003\132\001\000"+
    "\001\132\001\000\010\132\001\000\002\132\002\000\001\132\001\000"+
    "\022\155\002\000\003\155\001\000\001\132\001\000\010\132\001\000"+
    "\002\155\002\000\001\155\001\000\005\130\001\106\014\130\002\000"+
    "\003\130\001\000\001\130\001\020\001\131\002\132\001\133\004\132"+
    "\001\000\002\130\002\000\001\130\001\000\020\130\001\106\001\130"+
    "\002\000\003\130\001\000\001\130\001\020\001\131\002\132\001\133"+
    "\004\132\001\000\002\130\002\000\001\130\042\000\001\156\007\000"+
    "\001\143\001\144\001\145\001\146\001\145\001\147\001\150\001\145"+
    "\001\151\002\145\001\152\001\145\001\153\002\145\001\154\001\145"+
    "\002\000\001\145\001\123\001\157\001\000\001\132\001\000\010\132"+
    "\001\000\002\145\002\000\001\145\001\000\022\132\002\000\001\132"+
    "\002\160\001\000\001\132\001\000\010\132\001\000\002\132\002\000"+
    "\001\132\001\000\022\015\002\000\003\015\001\057\001\020\001\021"+
    "\001\037\001\000\001\122\001\023\001\024\004\000\001\025\001\015"+
    "\002\000\001\015\001\000\022\015\002\000\003\015\001\017\001\020"+
    "\001\021\001\037\001\000\001\161\001\023\001\024\004\000\001\025"+
    "\001\015\002\000\001\015\001\000\001\106\001\107\020\106\002\000"+
    "\001\106\001\130\001\106\001\000\001\130\001\020\001\131\002\132"+
    "\001\133\004\132\001\000\002\106\002\000\001\106\001\000\003\106"+
    "\001\111\016\106\002\000\001\106\001\130\001\106\001\000\001\130"+
    "\001\020\001\131\002\132\001\133\004\132\001\000\002\106\002\000"+
    "\001\106\001\000\022\106\002\000\001\106\001\130\001\106\001\000"+
    "\001\130\001\020\001\131\002\132\001\133\004\132\001\000\002\106"+
    "\002\000\001\106\001\000\010\106\001\112\011\106\002\000\001\106"+
    "\001\130\001\106\001\000\001\130\001\020\001\131\002\132\001\133"+
    "\004\132\001\000\002\106\002\000\001\106\001\000\016\106\001\113"+
    "\003\106\002\000\001\106\001\130\001\106\001\000\001\130\001\020"+
    "\001\131\002\132\001\133\004\132\001\000\002\106\002\000\001\106"+
    "\001\000\005\106\001\114\014\106\002\000\001\106\001\130\001\106"+
    "\001\000\001\130\001\020\001\131\002\132\001\133\004\132\001\000"+
    "\002\106\002\000\001\106\001\000\011\106\001\115\010\106\002\000"+
    "\001\106\001\130\001\106\001\000\001\130\001\020\001\131\002\132"+
    "\001\133\004\132\001\000\002\106\002\000\001\106\001\000\001\106"+
    "\001\116\020\106\002\000\001\106\001\130\001\106\001\000\001\130"+
    "\001\020\001\131\002\132\001\133\004\132\001\000\002\106\002\000"+
    "\001\106\001\000\005\106\001\117\014\106\002\000\001\106\001\130"+
    "\001\106\001\000\001\130\001\020\001\131\002\132\001\133\004\132"+
    "\001\000\002\106\002\000\001\106\001\000\016\106\001\120\003\106"+
    "\002\000\001\106\001\130\001\106\001\000\001\130\001\020\001\131"+
    "\002\132\001\133\004\132\001\000\002\106\002\000\001\106\001\000"+
    "\022\155\002\000\003\155\001\000\001\155\001\055\001\133\007\132"+
    "\001\000\002\155\002\000\001\155\001\000\022\162\002\000\003\162"+
    "\014\000\002\162\002\000\001\162\001\000\022\106\002\000\001\106"+
    "\002\123\001\000\001\130\001\030\001\137\001\132\001\140\001\133"+
    "\003\132\001\140\001\032\002\106\002\000\001\106\001\000\022\132"+
    "\002\000\001\132\002\160\001\000\001\132\001\032\001\140\001\132"+
    "\001\140\004\132\001\140\001\032\002\132\002\000\001\132\001\000"+
    "\022\163\002\000\003\163\014\000\002\163\002\000\001\163\001\000"+
    "\022\162\002\000\003\162\001\000\002\162\001\164\010\000\002\162"+
    "\002\000\001\162\001\000\022\163\002\000\003\163\001\000\002\163"+
    "\001\161\002\000\001\023\005\000\002\163\002\000\001\163\001\000"+
    "\022\165\002\000\001\165\001\162\001\165\014\000\002\165\002\000"+
    "\001\165\001\000\022\166\002\000\001\166\001\162\001\166\001\000"+
    "\002\162\001\164\010\000\002\166\002\000\001\166\001\000\022\166"+
    "\002\000\003\166\001\000\001\166\001\162\001\167\007\132\001\000"+
    "\002\166\002\000\001\166\001\000\022\166\002\000\003\166\001\000"+
    "\001\132\001\000\010\132\001\000\002\166\002\000\001\166";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4674];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\001\000\001\011\006\001\001\011\005\001\001\000\003\001\002\000"+
    "\004\001\002\000\002\001\001\000\001\001\001\000\043\001\001\000"+
    "\001\001\001\000\013\001\002\000\013\001\001\000\017\001\001\000"+
    "\002\001\005\000\002\001";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[119];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
public static final int TERM           = 1;
public static final int NUMERIC        = 2;
public static final int SENTENCEMARKER = 3;
public static final int PUNCTUATION    = 4;
public static final int EMAIL          = 5;
public static final int ACRONYM        = 6;
public static final int FULL_URL       = 7;
public static final int BARE_URL       = 8;
public static final int FILE           = 9;
public static final int HYPHTERM       = 10;

public final int yychar()
{
    return yychar;
}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JFlexWordBasedParserImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  JFlexWordBasedParserImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { return ACRONYM;
          }
        case 12: break;
        case 11: 
          { return FULL_URL;
          }
        case 13: break;
        case 4: 
          { return PUNCTUATION;
          }
        case 14: break;
        case 1: 
          { ;
          }
        case 15: break;
        case 10: 
          { return BARE_URL;
          }
        case 16: break;
        case 6: 
          { return FILE;
          }
        case 17: break;
        case 7: 
          { return HYPHTERM;
          }
        case 18: break;
        case 2: 
          { return TERM;
          }
        case 19: break;
        case 8: 
          { return EMAIL;
          }
        case 20: break;
        case 3: 
          { return NUMERIC;
          }
        case 21: break;
        case 5: 
          { return SENTENCEMARKER;
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
