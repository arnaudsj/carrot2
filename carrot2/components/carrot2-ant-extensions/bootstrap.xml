<project name="bootstrap task" default="_failure">
    <property name="bootstrap.dir" location="${carrot2.cvs.dir}/components/carrot2-ant-extensions/tmp/bootstrap" />

    <target name="_failure">
        <fail>Bootstrap is intended for inclusion only.</fail>
    </target>

    <target name="bootstrap:compile">
        <mkdir dir="${bootstrap.dir}" />
        <javac destdir     = "${bootstrap.dir}"
               debug       = "true"
               optimize    = "false"
               deprecation = "on"
               includeantruntime = "true"
               includejavaruntime = "false"
			   encoding = "UTF-8"
               source="1.2" target="1.2"
        >
            <src path="${carrot2.cvs.dir}/components/carrot2-ant-extensions/src" />
            <classpath>
                <fileset dir="${carrot2.cvs.dir}/lib/compile-time" includes="resolver.jar" />
            </classpath>
        </javac>

        <mkdir dir="${bootstrap.dir}/res" />
        <copy todir="${bootstrap.dir}/res">
            <fileset dir="${carrot2.cvs.dir}/etc">
                <include name="catalog.xml" />
                <include name="component-dependency.dtd" />
            </fileset>
            <fileset dir="${carrot2.cvs.dir}/components/carrot2-ant-extensions/src/res">
                <include name="*antlib.xml" />
            </fileset>
        </copy>
    </target>

    <target name="bootstrap" depends="bootstrap:compile">
        <path id="bootstrap">
            <pathelement location="${bootstrap.dir}" />
            <fileset dir="${carrot2.cvs.dir}/lib/compile-time" includes="resolver.jar" />        
        </path>

        <taskdef resource="res/carrot2-antlib.xml" 
            loaderref="c2.tasks.classloader" classpathref="bootstrap" />
    </target>
    
    <target name="bootstrap:dependencies">
        <property name="project.dir" value="." />
        <!--
          Part of the trickery of scanning "dependencies" path only once and caching the component
          descriptors found on the classpath is to load the path in the topmost ant file (project)
          and then pass it to subprojects to reuse. Unfortunately, because subprojects
          redefine classloaders of custom tasks, the reference cannot be simply reused as-is
          (at least I didn't find a way to do it). We thus serialize a map of descriptors
          and pass them as a project property.
          -->
        <dependency-path id="dependencies" cacheProperty="cache:deps">
            <fileset dir="${carrot2.cvs.dir}">
                <include name="lib/**/*.dep.xml" />
                <include name="components/*/*.dep.xml" />
                <include name="components/*/lib/*.dep.xml" />        

                <include name="applications/carrot2-demo-browser/**/*.dep.xml" />
            </fileset>
            <dependency-path path="${extra.dependencies.path}" />
        </dependency-path>
        <loadPath>
            <dependencies refid="dependencies" />
        </loadPath>
    </target>
</project>