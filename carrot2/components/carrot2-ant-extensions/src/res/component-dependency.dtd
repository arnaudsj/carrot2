
<!-- 
     Component element is the root element of a component
     descriptor file.
     
     It contains component's name (identifier used in other
     descriptors), and an informative description used when printing
     dependencies to an 'info' file.
  -->
<!ELEMENT component (provides*, dependency*) >

<!ATTLIST component name NMTOKEN #REQUIRED >
<!ATTLIST component description CDATA #IMPLIED >

<!-- 
     A dependency to a named component. Only the name of the
     required component is given here - its location is to be
     specified in the build file using nested search paths (filesets).

     A dependency is added to the set only if the 'profile' attribute equals
     current compilation profile. An empty 'profile' attribute matches
     any current profile.
     
     A component may request another component in a profile different to the 
     current one using 'in-profile' attribute.
     
     When 'no-copy' attribute is set, ant target collect-dependencies will not
     copy files from the dependency (although they will be included in the classpath
     for compilation).
     
     The 'noexport' attribute keeps the dependency local to the component (it is
     not exported if the component is referred from another one).
  -->

<!ELEMENT dependency EMPTY >

<!ATTLIST dependency name NMTOKEN #REQUIRED >
<!ATTLIST dependency profile NMTOKEN #IMPLIED >
<!ATTLIST dependency nocopy (true|false) "false" >
<!ATTLIST dependency noexport (true|false) "false" >
<!ATTLIST dependency in-profile NMTOKEN #IMPLIED >


<!--
    Provides element specifies the objects provided by this component. These
    objects may be either dynamic (created by the component's build file),
    or static (libraries, JARs etc).

    Dynamic objects will contain a 'build' element as a child of
    'provides'. Build element is executed when some of the objects
    specified in 'files' are not found or when 'check-newer' conditions
    indicate a rebuild is necessary.
  -->
  
<!ELEMENT provides (files*, build*, check-newer?, rebuild-always?, meta*) >

<!ATTLIST provides profile NMTOKEN #IMPLIED >

<!-- 
    Files element contains a list of relative paths (resolved
    against the component dependency file) to objects provided
    by the component. Each file's relative path is created
    when dependencies are collected. To ignore path of the relative
    path, use the 'prefix' attribute.
  -->
<!ELEMENT files (file+) >
<!ATTLIST files prefix CDATA #IMPLIED >
<!ATTLIST files build-path-exclude (true|false) "false">


<!ELEMENT file EMPTY >
<!ATTLIST file location CDATA #REQUIRED >

<!-- 
    Build element specifies actions that need to be performed
    to create provided objects if they are missing.
  -->
<!ELEMENT build (ant)+ >

<!--
    ANT task is a build action that executes ANT build file
    relative to component descriptor's path/
  -->
<!ELEMENT ant EMPTY >
<!ATTLIST ant file CDATA #REQUIRED >
<!ATTLIST ant target CDATA #IMPLIED >

<!--
    If present, this element will trigger a check if any of the
    provided component's files are older then any of the files
    contained in the given filesets. If so, a rebuild is invoked.
  -->
<!ELEMENT check-newer (fileset+) >

<!--
    If present, this element will trigger a full rebuild when
    a component is referenced as a dependency. The build elements
    specifies what kind of build is invoked.
  -->
<!ELEMENT rebuild-always EMPTY >

<!--
    An ANT-like fileset. Currently the fileset only supports
    a subset of ANT attributes. The fileset EXCLUDES ANT's default
    excludes from the list.
  -->
<!ELEMENT fileset EMPTY >
<!ATTLIST fileset dir CDATA #REQUIRED >

<!--
    A meta element carries a key and textual content. Metas are used
    to associate extra information with the component, for example
    proguard obfuscation info.
  -->
<!ELEMENT meta (#PCDATA) >
<!ATTLIST meta type (proguard) #REQUIRED >

