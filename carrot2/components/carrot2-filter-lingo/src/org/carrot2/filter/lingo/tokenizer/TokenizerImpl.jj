
options {
    STATIC                 = false;
    OPTIMIZE_TOKEN_MANAGER = true;
    UNICODE_INPUT          = true;
}


PARSER_BEGIN(TokenizerImpl)

package org.carrot2.filter.lingo.tokenizer;
    
/**
 * Implementation of abstract Tokenizer class generated by JavaCC parser generator.
 */
class TokenizerImpl
{

}

PARSER_END(TokenizerImpl)



TOKEN:
{
    // URL
      <URL: (("http" | "ftp" | "mailto") "://" ((<SYMBOL> ("." <SYMBOL>)* (<URLPATH>)*) | <EMAIL>)) | (<WWWADDR>) >
    | < #WWWADDR: <SYMBOL> ("." <SYMBOL>)* 
    	((( "." (("mil" | "info" | "gov" | "edu" | "biz" | "com" | "org" | "net") (<URLPATH>)* )) 
    	| 
    	 ("." (<LETTER>){2} <URLPATH> ))) >
    | < #URLPATH: ("/" <SYMBOL>)+ ("." <SYMBOL>)? ("/")? ("?" <SYMBOL> ((";" | ":" | "@" | "&" | "=") <SYMBOL>)*)* >
}

TOKEN :
{
    // Plain terms - alphanumeric sequences without any other characters in between
    <TERM: (<LETTER>|<DIGIT>)* <LETTER> (<LETTER>|<DIGIT>)*>
    // Hyphenated term
    | <HYPHTERM: <LETTERSEQ> ( "-" <LETTERSEQ>)* > 
    // Name abbreviations (D.Weiss, T. Scott), Names like O'J'Simpson will be 
    // recognized as TERM TERM TERM, not a name.
    | <PERSON: ( (<LETTER> "." (<WHSPACE>)*){1,2} <LETTER> <LETTER> <LETTERSEQ> ) >
    // Abbreviations and acronyms
    | <ACRONYM: (<LETTER> "." (<LETTER> ".")+) | (<TERM> ("&" <TERM>)+) >
    // E-mails
    | <EMAIL: <SYMBOL> ("." <SYMBOL>)* "@" <SYMBOL> ("." <SYMBOL>)* >
    | <SENTENCEMARKER: ("." | "?" | "!" | ";" )+ >
    | <PUNCTUATION: "," | "'" | ":" | "-" >
    | <NUMERIC: (<DIGIT>)+ ((":" | "-" | "/" | "," | ".") (<DIGIT>)+)* >
    | < #SYMBOL: (<LETTER>|<DIGIT>)(<LETTER>|<DIGIT>|"_"|"-")* >
    | < #WHSPACE: " " | "\n" | "\r" | "\t" >
    | < #LETTERSEQ: (<LETTER>)+ >
    | < #LETTER:
      [
       "\u0041"-"\u005a", "\u0061"-"\u007a", "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff",
       "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff", "\uf900"-"\ufaff"
      ]
    >
    | < #DIGIT:
      [
       "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9",
       "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049"
      ]
    >
}

SKIP :
{
    <SPACES: (<WHSPACE>)+ >
}

SKIP :
{
    <NOISE: ~[] >
}

