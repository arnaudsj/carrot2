    
<!--
  ## A generic template for building a Carrot2 component.
  -->
<project name="Component Build File Template" default="help">

  <property name="undefined.value" value="__UNDEFINED_VALUE__" />

  <!-- ## these are overriden by master build file ### -->
  <property name="project.dir"      value="${undefined.value}" />
  <property name="carrot2.cvs.dir"  value="${undefined.value}" />
  <property name="dist.name"        value="${undefined.value}" />

  <property name="build.dir"        location="${project.dir}/tmp/build" />
  <property name="distribution.dir" location="${project.dir}/tmp/dist" />
  <property name="javadoc.dir"      location="${project.dir}/tmp/javadoc" />

  <property name="src.path"         location="${project.dir}/src" />
  <property name="src-test.path"    location="${project.dir}/src-test" />
  <property name="src-webapp.path"  location="${project.dir}/web" />

  <property name="component.descriptor" location="${project.dir}/${dist.name}.dep.xml" />
  <property name="profile"          value="" />
  
  <property file="${user.home}/.carrot.properties" />
  <property file="${carrot2.cvs.dir}/local-build.properties" />

  <property name="tomcat.url"       value="http://localhost:8080/manager" />
  <property name="tomcat.username"  value="carrot" />
  <property name="tomcat.password"  value="" />

  <property name="extra.dependencies.path" value="" />

  <!-- Bytecode compatibility level -->
  <property name="bytecode.compatibility" value="1.2" />
  <property name="source.compatibility" value="1.2" />

  <!--
    Set this property to any other value to collect separate carrot2 dependencies
    indstead of a single JAR file.
    -->
  <property name="single.jar"       value="false" />

  <!-- ## global properties ### -->

  <property name="build.compiler"   value="modern" />
  <property name="javac.optimize"   value="off" />
  <property name="javac.debug"      value="on" />

  <property name="include.ant.runtime" value="false" />
  
  <import file="${carrot2.cvs.dir}/components/carrot2-ant-extensions/bootstrap.xml" />

  <!-- Load ant-contrib task library -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath location="${carrot2.cvs.dir}/lib/ant-extensions/ant-contrib.jar" />
  </taskdef>

  <!-- ##################################### -->
  <!-- ### CHECK REQUIRED PROPERTIES     ### -->
  <!-- ##################################### -->
  <target name="check:properties"> <!-- {{{ -->
    <condition property="ok:project.dir" value="true">
        <and>
            <not>
                <equals arg1="${project.dir}" arg2="${undefined.value}"/>
            </not>
            <available file="${project.dir}" type="dir" />
        </and>
    </condition>
    <fail message="'project.dir' property must be initialized properly." unless="ok:project.dir" />

    <condition property="ok:carrot2.cvs.dir" value="true">
        <and>
            <available file="${carrot2.cvs.dir}/lib" type="dir" />
            <available file="${carrot2.cvs.dir}/carrot2.LICENSE" type="file" />
        </and>
    </condition>
    <fail message="'carrot2.cvs.dir' property must be set properly: ${carrot2.cvs.dir}" unless="ok:carrot2.cvs.dir" />

    <!-- Set to true if dependency file is available. -->
    <condition property="tmp:dep.file.available" value="true">
        <available file="${component.descriptor}" type="file" />
    </condition>

    <!-- Check if we need to copy dependencies -->
    <condition property="ok.copy.dependencies" value="true">
        <and>
        <isset property="copy.dependencies" />
        <isset property="tmp:dep.file.available" />
        </and>
    </condition>
  </target>
  <!-- }}} -->


  <!-- ##################################### -->
  <!-- ### {{{ CLEAN                     ### -->
  <!-- ##################################### -->
  <target name="clean" depends="check:properties"
    description="Removes local temporary files.">
    <delete failonerror="false" includeemptydirs="true" quiet="true">
        <fileset dir="${project.dir}/tmp">
          <exclude name="eclipse/**/*"/>
        </fileset>
    </delete>
  </target>
  <!-- }}} -->


  <!-- ##################################### -->
  <!-- ### {{{ CLEANALL                  ### -->
  <!-- ##################################### -->
  <target name="cleanall" depends="check:properties"
    description="Removes all local temporary files.">
    <delete failonerror="true" includeemptydirs="true" quiet="true">
        <fileset dir="${project.dir}/tmp" defaultexcludes="false" />
    </delete>
	<if>
		<equals arg1="${type}" arg2="wartype" casesensitive="false" />
		<then>
			<delete failonerror="true" includeemptydirs="true" quiet="true">
			    <fileset dir="${project.dir}" defaultexcludes="false">
			    	<include name="web/WEB-INF/classes/**" />
			    	<include name="web/WEB-INF/lib/**" />
			    </fileset>
			</delete>
		</then>
	</if>    
  </target>
  <!-- }}} -->


  <!-- ##################################### -->
  <!-- ### {{{ PREPARE                   ### -->
  <!-- ##################################### -->
  <target name="prepare" depends="check:properties, bootstrap, discover.classpath">
    <condition property="ok:dist.name" value="true">
        <not>
            <equals arg1="${dist.name}" arg2="${undefined.value}"/>
        </not>
    </condition>
    <fail message="'dist.name' property must be set." unless="ok:dist.name" />


    <mkdir dir="${distribution.dir}"  />
    <mkdir dir="${javadoc.dir}" />
  </target>
  
  <target name="discover.classpath" depends="discover.classpath:autodependency,discover.classpath:empty">
  </target>

  <target name="discover.classpath:autodependency" depends="bootstrap:dependencies" if="tmp:dep.file.available">
    <dependency-path id="dependencies.local">
        <fileset dir="${project.dir}">
            <include name="lib/*.dep.xml" />
        </fileset>
    </dependency-path>

    <if>
        <not><isset property="no.bringing.dependencies.uptodate" /></not>
        <then>
            <bringToDate componentDescriptor="${component.descriptor}" dependenciesOnly="true" profile="${profile}">
                <dependencies refid="dependencies" />
                <dependencies refid="dependencies.local" />
                <override property="cache:deps" />
                <override reference="c2.tasks.classloader" />
            </bringToDate>
        </then>
    </if>

    <component-path id="classpath.dependencies"
        componentDescriptor="${component.descriptor}" profile="${profile}">
        <dependencies refid="dependencies" />
        <dependencies refid="dependencies.local" />
    </component-path>

    <printDependencies componentDescriptor="${component.descriptor}"
                       property="string:component.dependencies" profile="${profile}">
        <dependencies refid="dependencies" />
        <dependencies refid="dependencies.local" />
    </printDependencies>
  </target>

  <target name="discover.classpath:empty" unless="tmp:dep.file.available">
    <dependency-path id="classpath.dependencies" />
    <property name="string:component.dependencies" value="(no dependency file, unknown)" />
  </target>
  
  <target name="copy.dependencies" depends="prepare" if="ok.copy.dependencies">
    <property name="dist.extension" value="" />
    <property name="libs.dir" location="${distribution.dir}/deps-${dist.name}${dist.extension}" />

    <delete dir="${libs.dir}" failonerror="false" />
    <mkdir dir="${libs.dir}" />
    <copyDependencies
        componentDescriptor="${component.descriptor}"
        profile="${profile}"
        todir="${libs.dir}">
        <dependencies refid="dependencies" />
        <dependencies refid="dependencies.local" />
    </copyDependencies>
    
    <condition property="merge.carrot2.components" value="true">
        <equals arg1="${single.jar}" arg2="true" casesensitive="false" />
    </condition>
    <antcall target="merge.carrot2.components" inheritAll="true"> 
        <reference refid="dependencies" />
    </antcall>
  </target>

  <target name="merge.carrot2.components" if="merge.carrot2.components">
    <!-- Merge the used Carrot2 components into a single JAR-->
    <property name="tmp:c2merge.dir" value="${libs.dir}/_tmp_c2merge" />
    <delete dir="${tmp:c2merge.dir}" failonerror="false" />
    <mkdir dir="${tmp:c2merge.dir}" />
    <unjar dest="${tmp:c2merge.dir}">
        <fileset dir="${libs.dir}">
            <include name="carrot2-*.jar"/>
        </fileset>
    </unjar>
    <delete failonerror="false">
        <fileset dir="${libs.dir}">
            <include name="carrot2-*.jar" />
        </fileset>
    </delete>
    <jar destfile="${libs.dir}/carrot2-merged-components.jar" basedir="${tmp:c2merge.dir}"
         update="false">
        <manifest>
            <attribute name="Information"
                       value="This file contains several Carrot2 components repacked to a single JAR file. Do not reuse."/>
        </manifest>
    </jar>
    <delete dir="${tmp:c2merge.dir}" failonerror="false" />
  </target>
  <!-- }}} -->

  <!-- ##################################### -->
  <!-- ### {{{ DEPENDENCIES task         ### -->
  <!-- ##################################### -->

  <target name="dependencies" depends="depsoff,prepare">
  	<echo>
Component descriptor:
${component.descriptor}

Project dependencies:
  	
${string:component.dependencies}
  	</echo>
  </target>
  
  <target name="depsoff">
  	<property name="no.bringing.dependencies.uptodate" value="true" />
  </target>


  <!-- ##################################### -->
  <!-- ### {{{ JAR TYPE BUILD            ### -->
  <!-- ##################################### -->

  <target name="build.jartype" depends="prepare,build.jartype.internal,copy.dependencies">
  </target>

  <target name="build.jartype.internal" depends="prepare">
    <property name="dist.extension" value="-jar" />

    <tstamp>
      <format property="build.tstamp" pattern="dd/MM/yyyy HH:mm Z" />
    </tstamp>

    <mkdir dir="${build.dir}/type-jar" />
    <javac destdir     = "${build.dir}/type-jar"
           debug       = "${javac.debug}"
           optimize    = "${javac.optimize}"
           deprecation = "on"
           includeantruntime = "${include.ant.runtime}"
           includejavaruntime = "false"
           encoding	   = "UTF-8"
           source="${source.compatibility}" target="${bytecode.compatibility}"
    >
        <classpath refid="classpath.dependencies" />
        <classpath refid="classpath.local" />
        <src path="${src.path}" />
        <patternset refid="src.patternset" />
    </javac>

    <!-- copy any non-java files (resources) from the source path. -->
    <copy toDir="${build.dir}/type-jar">
       <fileset dir="${src.path}">
         <exclude name="**/*.java"/>
         <patternset refid="src.patternset" />
       </fileset>
    </copy>
    
    <!-- Create a timestamp of the newest source file. -->
    <mostRecentFileDate 
        millisProperty="tmp:last-modified"
        dateProperty="tmp:last-modified-date"
        exceptionOnEmpty="true">
        <format pattern="dd/MM/yyyy HH:mm Z" />
        <fileset dir="${src.path}" includes="**/*.java" />
    </mostRecentFileDate>
    
    <!-- Create information file. -->
    <mkdir dir="${build.dir}/type-jar/META-INF" />
    <delete file="${build.dir}/type-jar/META-INF/${dist.name}.jar.info" failonerror="false" />
    <echo file="${build.dir}/type-jar/META-INF/${dist.name}.jar.info">
Component: ${dist.name}
Profile:   ${profile}

Built by             : ${user.name}
Build time           : ${build.tstamp}
Freshest source file : ${tmp:last-modified-date}

${string:component.dependencies}
    </echo>

    <copy file="${build.dir}/type-jar/META-INF/${dist.name}.jar.info"
          tofile="${distribution.dir}/${dist.name}.jar.info" overwrite="true" />

    <jar update="false" compress="true" jarfile="${distribution.dir}/${dist.name}.jar">
        <fileset dir="${build.dir}/type-jar">
            <patternset refid="src.patternset" />
        </fileset>
        <manifest>
            <attribute name="Built-By"   value="${user.name}"/>
            <attribute name="Build-Time" value="${build.tstamp}" />
            <attribute name="Freshest-Source-File" value="${tmp:last-modified-date}" />            
        </manifest>
    </jar>
  </target>
  <!-- }}} -->

  <!-- ##################################### -->
  <!-- ### {{{ WAR TYPE BUILD            ### -->
  <!-- ##################################### -->

  <target name="tomcat.deploy" depends="tomcat.undeploy">
    <deploy url="${tomcat.url}" 
		username="${tomcat.username}"
		password="${tomcat.password}"
        path="/${dist.name}"
		war="${distribution.dir}/${dist.name}.war"/>
  </target>
  
  <target name="tomcat.undeploy" depends="tomcat.tasks">
    <undeploy url="${tomcat.url}" 
		username="${tomcat.username}"
		password="${tomcat.password}"
        path="/${dist.name}" failonerror="false" />
  </target>  
  
  <target name="tomcat.tasks">
    <condition property="ok:deploy" value="true">
		<equals arg1="${type}" arg2="wartype"/>
    </condition>
    <fail message="Build type not 'wartype'. Can't undeploy." unless="ok:deploy" />

	<echo>
Un/Deploying:   ${distribution.dir}/${dist.name}.war
Remote path: /${dist.name}
Tomcat:      ${tomcat.url}
	</echo>

    <path id="tomcat.tasks">
        <pathelement location="${carrot2.cvs.dir}/lib/ant-extensions/catalina-ant.jar" />
	</path>
	
    <taskdef name="deploy"    classname="org.apache.catalina.ant.DeployTask">
		<classpath refid="tomcat.tasks" />
	</taskdef>
	<taskdef name="undeploy"  classname="org.apache.catalina.ant.UndeployTask">
		<classpath refid="tomcat.tasks" />
	</taskdef>
  </target>
  
  <target name="build.wartype">
    <property name="copy.dependencies" value="true" />
    <property name="libs.dir" location="${build.dir}/type-war/WEB-INF/lib" />
    <antcall target="build.wartype.internal" inheritall="true" inheritrefs="true" />
  </target>

  <target name="build.wartype.internal" depends="prepare,copy.dependencies">
    <property name="dist.extension" value="-war" />
  
    <tstamp>
      <format property="build.tstamp" pattern="dd/MM/yyyy HH:mm Z" />
    </tstamp>

    <mkdir dir="${build.dir}/type-war/WEB-INF/classes" />
    <mkdir dir="${build.dir}/type-war/WEB-INF/lib" />

    <javac destdir     = "${build.dir}/type-war/WEB-INF/classes"
           debug       = "${javac.debug}"
           optimize    = "${javac.optimize}"
           deprecation = "on"
           includeantruntime = "${include.ant.runtime}"
           includejavaruntime = "false"
           encoding	   = "UTF-8"
           source="${source.compatibility}" target="${bytecode.compatibility}"
    >
        <classpath refid="classpath.dependencies" />
        <classpath refid="classpath.local" />
        <src path="${src.path}" />
        <patternset refid="src.patternset" />
    </javac>

    <!-- copy any non-java files (resources) from the source path. -->
    <copy toDir="${build.dir}/type-war/WEB-INF/classes">
       <fileset dir="${src.path}">
         <exclude name="**/*.java"/>
         <patternset refid="src.patternset" />
       </fileset>
    </copy>
    
    <!-- copy webapp resources from the source path -->
    <available file="${src-webapp.path}" type="dir" property="cond:webapp.available" />
    <fail unless="cond:webapp.available">
    ### Webapp directory not present in the project: ${src-webapp.path}
    </fail>
    <copy toDir="${build.dir}/type-war">
        <fileset dir="${src-webapp.path}">
          <exclude name="WEB-INF/web.xml.template" />
          <exclude name="WEB-INF/lib/**" />
          <exclude name="WEB-INF/classes/**" />
          <patternset refid="war.patternset" />
        </fileset>
    </copy>

    <!-- Create a timestamp of the newest source file. -->
    <mostRecentFileDate 
        millisProperty="tmp:last-modified"
        dateProperty="tmp:last-modified-date"
        exceptionOnEmpty="true">
        <format pattern="dd/MM/yyyy HH:mm Z" />
        <fileset dir="${src.path}" includes="**/*.java" />
        <fileset dir="${src-webapp.path}" includes="**/*.*" />
    </mostRecentFileDate>

    <!-- Create information file. -->
    <mkdir dir="${build.dir}/type-war/META-INF" />
    <delete file="${build.dir}/type-war/META-INF/${dist.name}.war.info" failonerror="false" />
    <echo file="${build.dir}/type-war/META-INF/${dist.name}.war.info">
Component: ${dist.name}
Profile:   ${profile}

Built by             : ${user.name}
Build time           : ${build.tstamp}
Freshest source file : ${tmp:last-modified-date}

${string:component.dependencies}
    </echo>

    <copy file="${build.dir}/type-war/META-INF/${dist.name}.war.info"
          tofile="${distribution.dir}/${dist.name}.war.info" overwrite="true" />

    <manifest file="${build.dir}/type-war/META-INF/MANIFEST.MF" mode="replace">
        <attribute name="Built-By"   value="${user.name}"/>
        <attribute name="Build-Time" value="${build.tstamp}" />
        <attribute name="Freshest-Source-File" value="${tmp:last-modified-date}" />            
    </manifest>

    <zip compress="true" zipfile="${distribution.dir}/${dist.name}.war">
        <fileset dir="${build.dir}/type-war" />
    </zip>
  </target>
  <!-- }}} -->


  <!-- ##################################### -->
  <!-- ### {{{ TEST TYPE BUILD           ### -->
  <!-- ##################################### -->

  <target name="build.testtype" depends="prepare">
    <tstamp>
      <format property="build.tstamp" pattern="MM/dd/yyyy HH:mm Z" />
    </tstamp>
    
    <property name="build.type" value="type-test" />

    <mkdir dir="${build.dir}/${build.type}" />
    <javac destdir     = "${build.dir}/${build.type}"
           debug       = "${javac.debug}"
           optimize    = "${javac.optimize}"
           deprecation = "on"
           includeantruntime = "${include.ant.runtime}"
           includejavaruntime = "false"
           encoding	   = "UTF-8"
           source="${source.compatibility}" target="${bytecode.compatibility}"
    >
        <classpath refid="classpath.local" />
        <patternset refid="src.patternset" />
        <classpath refid="classpath.dependencies" />
        <src path="${src.path}" />
        <src path="${src-test.path}" />
    </javac>

    <!-- copy any non-java files (resources) from the source path. -->
    <copy toDir="${build.dir}/${build.type}">
       <fileset dir="${src.path}">
         <exclude name="**/*.java" />
       </fileset>
       <fileset dir="${src-test.path}">
         <exclude name="**/*.java" />
       </fileset>
    </copy>

    <!-- Run local tests. -->
    <delete dir="${build.dir}/junit-temp" failonerror="false" />
    <mkdir dir="${build.dir}/junit-temp"/>
    <delete dir="${build.dir}/junit-report" failonerror="false" />
    <mkdir dir="${build.dir}/junit-report"/>

    <pathconvert targetos="unix" property="tmp:safepath">
        <path location="${build.dir}/junit-temp/junit-log4j-log.html" />
    </pathconvert>
    <copy file="${carrot2.cvs.dir}/etc/test-log4j.properties"
          tofile="${build.dir}/junit-temp/test-log4j.properties"
          includeemptydirs="false" filtering="true" overwrite="true">
        <filterset begintoken="@" endtoken="@" id="deployment.info">
            <filter token="LOGPATH"       value="${tmp:safepath}" />
        </filterset>
    </copy>
    <pathconvert property="tmp:loggingSettings" pathSep=",">
        <path><pathelement location="${build.dir}/junit-temp/test-log4j.properties" /></path>
    </pathconvert>
    <touch file="${build.dir}/junit-temp/junit-log4j-log.html" />

    <property environment="env"/>

    <junit dir="${build.dir}/${build.type}" forkmode="perBatch" fork="true" printsummary="true"
        errorproperty="junit.error" failureproperty="junit.failure">

        <formatter type="xml"/>

        <classpath refid="classpath.dependencies" />
        <classpath location="${build.dir}/${build.type}" />
        <classpath refid="classpath.local" />

        <!-- HACK: we pass javac in classpath because some test cases invoke ant
             in an in-process mode, which skips classpath initialization. -->
        <classpath location="${env.JAVA_HOME}/lib/tools.jar" />
        <classpath>
            <fileset dir="${carrot2.cvs.dir}/lib/compile-time" includes="resolver.jar" />
        </classpath>
        
        <sysproperty key="log4j.configuration" value="file:///${tmp:loggingSettings}"/>

		<batchtest todir="${build.dir}/junit-temp">
			<fileset dir="${build.dir}/${build.type}">
				<include name="**/*Test.class" />
                <exclude name="org/apache/**" />
			</fileset>
		</batchtest>
    </junit>

    <junitreport todir="${build.dir}/junit-report">
        <fileset dir="${build.dir}/junit-temp">
            <include name="*.xml"/>
        </fileset>
        <report format="frames" todir="${build.dir}/junit-report"/>
    </junitreport>

    <copy file="${build.dir}/junit-temp/junit-log4j-log.html"
          tofile="${build.dir}/junit-report/junit-log4j-log.html" overwrite="true" />

	<if>
		<or>
			<isset property="junit.failure" />
			<isset property="junit.error" />
		</or>
		<then>
		    <if>
		        <isset property="tests.failure.marker" />
		        <then>
		            <touch file="${tests.failure.marker}" />
		            <echo level="error">Some of the tests failed in ${build.dir}/junit-report/</echo>
		        </then>
		        <else>
		            <fail message="External tests failed. See ${build.dir}/junit-report for report." if="junit.error" />
		            <fail message="External tests failed. See ${build.dir}/junit-report for report." if="junit.failure" />
		        </else>
		    </if>
		</then>
	</if>
  </target>
  <!-- }}} -->

  <!-- ##################################### -->
  <!-- ### {{{ DEP TYPE BUILD            ### -->
  <!-- ##################################### -->

  <target name="build.deptype" depends="bootstrap, discover.classpath">
    <bringToDate componentDescriptor="${component.descriptor}"
                 dependenciesOnly="true" profile="${profile}">
        <dependencies refid="dependencies" />
        <dependencies refid="dependencies.local" />
    </bringToDate>

	<mkdir dir="${distribution.dir}" />

    <copyDependencies
        componentDescriptor="${component.descriptor}"
        profile="${profile}"
        todir="${distribution.dir}">
        <dependencies refid="dependencies" />
        <dependencies refid="dependencies.local" />
    </copyDependencies>
  </target>
  <!-- }}} -->


  <!-- ##################################### -->
  <!-- ### {{{ PROGUARD SECTION          ### -->
  <!-- ##################################### -->  
  <target name="proguard.collect" depends="bootstrap, discover.classpath">
    <fail unless="obf.rules.file">Specify destination file property for rules: proguard.rules.file</fail>

    <!-- Collect proguard definitions from dependencies. -->
    <collectMeta componentDescriptor="${component.descriptor}" type="proguard" 
                 property="proguard.rules" profile="${profile}">
        <dependencies refid="dependencies" />
        <dependencies refid="dependencies.local" />
    </collectMeta>

    <echo file="${obf.rules.file}">${proguard.rules}</echo>
  </target>

  <target name="proguard.run">
    <fail unless="obf.distribution.dir">Define obf.distribution.dir</fail>
    <fail unless="obf.jar.location">Define obf.jar.location</fail>

    <property name="obf.rules.file" location="${obf.distribution.dir}/${dist.name}.pro" />
    <property name="obf.seeds.file" location="${obf.distribution.dir}/${dist.name}.seeds" />
    <property name="obf.map.file" location="${obf.distribution.dir}/${dist.name}.map" />

    <!-- This can be used to leave certain obfuscation files after running this target.
         Put a string value containing substrings:
         rules  - leaves the rules file.
         seeds  - leaves the seeds file.
         map    - leaves the map file.
    -->
    <property name="obf.leave.files" value="" />

    <available file="${java.home}/lib" property="rt.libs.available" type="dir" value="true" />
    <fail unless="rt.libs.available">
Runtime Java libraries are needed for obfuscation. They are not found in
the default path: ${java.home}/lib
    </fail>

    <!-- Obfuscate in a separate folder. -->
    <delete dir="${obf.distribution.dir}" failonerror="false" />
    <copy todir="${obf.distribution.dir}">
        <fileset dir="${distribution.dir}" />
    </copy>

    <!-- Collect rules for obfuscating and run proguard -->
    <taskdef resource="proguard/ant/task.properties">
        <classpath location="${carrot2.cvs.dir}/lib/proguard/proguard.jar" />
    </taskdef>

    <antcall inheritall="true" inheritrefs="true" target="proguard.collect" />

    <proguard configuration="${obf.rules.file}" defaultpackage="c2" ignorewarnings="true" 
        printmapping="${obf.map.file}" printseeds="${obf.seeds.file}">
            <injar refid="input.jars" />
            <outjar file="tmp/obfuscated.jar"/>

            <libraryjar dir="${java.home}/lib/rt.jar"/>
            <libraryjar refid="library.jars" />
    </proguard>

    <!-- Remove input JARs used for obfuscation. -->
    <delete>
        <fileset refid="input.jars" />
    </delete>
	<if><not><contains string="${obf.leave.files}" substring="rules" casesensitive="false" /></not>
		<then><delete file="${obf.rules.file}" /></then></if>
	<if><not><contains string="${obf.leave.files}" substring="seeds" casesensitive="false" /></not>
		<then><delete file="${obf.seeds.file}" /></then></if>
	<if><not><contains string="${obf.leave.files}" substring="map" casesensitive="false" /></not>
		<then><delete file="${obf.map.file}" /></then></if>

    <move file="tmp/obfuscated.jar" tofile="${obf.jar.location}" />
  </target>
  
  <!-- }}} -->
  
  <!-- ##################################### -->
  <!-- ### {{{ CLASS EXEC HOOK           ### -->
  <!-- ##################################### -->  
  <target name="run.class" depends="prepare">
    <fail unless="run.class.name">
    Set 'run.class.name' property to run a class with the project's classpath.
    </fail>
  	<java classname="${run.class.name}" fork="true" failonerror="false">
        <classpath refid="classpath.dependencies" />
        <classpath location="${build.dir}/${build.type}" />
        <classpath location="${build.dir}/type-test" />
        <classpath location="${build.dir}/type-jar" />

        <classpath refid="classpath.local" />

        <!-- HACK: we pass javac in classpath because some test cases invoke ant
             in an in-process mode, which skips classpath initialization. -->
        <classpath location="${env.JAVA_HOME}/lib/tools.jar" />
    </java>
  </target>
  <!-- }}} -->

  <!-- ##################################### -->
  <!-- ### {{{ JAVADOC BUILD             ### -->
  <!-- ##################################### -->  
  <target name="javadoc" depends="javadoc.on, javadoc.internal" />

  <target name="javadoc.on">
    <property name="javadoc.on" value="true" />
    <property name="javadoc.packages" value="org.carrot2.*" />
  </target>

  <target name="javadoc.internal" if="javadoc.on" depends="prepare">
    <delete dir="${javadoc.dir}" failonerror="false" />
    <mkdir dir="${javadoc.dir}" />

    <javadoc packagenames     = "${javadoc.packages}"
             destdir          = "${javadoc.dir}"
             protected        = "true"
             version          = "false"
             use              = "true"
             doctitle         = "${ant.project.name}"
             header           = "${ant.project.name}"
             footer           = "Please refer to project documentation at &lt;br&gt;&lt;a href=http://www.carrot2.org&gt;http://www.carrot2.org&lt;/a&gt;"
             bottom           = "&lt;center&gt;Copyright (c) Copyright (C) Dawid Weiss, Stanislaw Osinski &lt;/center&gt;"
             failonerror      = "true"
             stylesheetfile   = "${carrot2.cvs.dir}/etc/javadoc/stylesheet.css"
    >
        <classpath refid="classpath.dependencies" />
        <classpath refid="classpath.local" />

        <fileset dir="${src.path}"> 
        	<patternset refid="src.patternset" />
        </fileset>
    </javadoc>
  </target>
  <!-- }}} -->
  
  <target name="help">
    <echo>Not for separate use.</echo>
  </target>

</project>
