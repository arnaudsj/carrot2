
import org.carrot2.core.*;
import org.carrot2.core.controller.*;
import org.carrot2.core.controller.StubOutputComponent;

/*

THIS APPROACH WORKS THE FIRST TIME IT IS EXECUTED,
SO IT MAY BE USED IN 'PRODUCTION' WHERE COMPONENTS
ARE LOADED ONLY ONCE.

HOWEVER, FOR TESTS WE LOAD COMPONENT DEFINITIONS
MANY TIMES AND
DUE TO PROBLEMS WITH BEANSHELL'S CLASSLOADER
MANAGEMENT, IT FAILS WITH DUPLICATED CLASS DEFINITION
ON SUCCESSIVE RUNS.

public class MyFactory implements LocalComponentFactory {
    public LocalComponent getInstance() {
	    LocalComponent c = new StubOutputComponent();
	    c.setProperty("property", "value");
		return c;
    }
};

// return a new instance of the 'extended' factory, that contains
// information about its id, pool size etc.

return new LoadedComponentFactory(
	"stub-output-bsh", 
	new MyFactory());

*/

/*
 * THIS APPROACH ALWAYS WORKS.
 */

factory = new LocalComponentFactory() {
    public LocalComponent getInstance() {
	    LocalComponent c = new StubOutputComponent();
	    c.setProperty("property", "value");
		return c;
    }
    
    public String getName() {
        return "name";
    }
    
    public String getDescription() {
        return "description";
    }
};
	
return new LoadedComponentFactory(
	/* id */ "stub-output-bsh", 
	factory);
