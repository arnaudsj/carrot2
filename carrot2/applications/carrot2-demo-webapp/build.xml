
<project name="Carrot2 Demo Web Application" default="build.demo">

    <property file="${user.home}/.carrot.properties" />
    <property file="local.properties" />

    <property name="project.dir"      location="${basedir}" />
    <property name="carrot2.code.dir"  location="../.." />

    <property name="type" value="wartype" />
    <property name="distribution.dir" location="${project.dir}/tmp/dist" />
    <property name="component.descriptor" location="carrot2-demo-webapp.dep.xml" />

	<property file="${project.dir}/customization.properties" />
  
    <import file="${carrot2.code.dir}/components/common-targets.inc" />

    <target name="build" depends="preprocess" description="Builds a demo WAR file.">
    	<property name="dist.name" value="carrot2-demo-webapp" />
        <property name="build.dir" location="${project.dir}/tmp/build.demo" />
        <property name="profile" value="demo" />

        <!--
          When there is a need to install a shared copy of log4j (between Web applications and
          Catalina), putting a local copy of Log4j causes severe class loading problems (multiple
          instantiations of singleton Logger classes, reconfiguration etc). Allow excluding
          log4j from the built WAR file by specifying a property: webapp.log4j.exclude
          -->
        <if>
            <isset property="webapp.log4j.exclude" />
            <then>
                <patternset id="war.patternset">
                    <exclude name="WEB-INF/lib/*log4j*.jar" />
                    <exclude name="WEB-INF/lib/carrot2-util-log4j*.jar" />
                </patternset>
            </then>
            <else>
            </else>
        </if>

        <ant target="build.${type}"
             antfile="${carrot2.code.dir}/components/master.xml" inheritall="true" inheritrefs="true">
        </ant>
    </target>

    <target name="build.demo" depends="build" description="Builds a WAR file with open source components demo.">
    </target>

    <target name="build.war" description="Builds a plain WAR file (no components)."
            depends="preprocess">
        <property name="dist.name" value="carrot2-webapp" />
        <property name="build.dir" location="${project.dir}/tmp/build.war" />

        <patternset id="war.patternset">
            <exclude name="algorithms/*.bsh" />
            <exclude name="algorithms/*.xml" />
            <exclude name="inputs/*.bsh" />
            <exclude name="inputs/*.xml" />
            <exclude name="inputs/*.cfg" />
        </patternset>

        <property name="profile" value="war" />
        <antcall target="build" inheritall="true">
            <reference refid="war.patternset" />
        </antcall>
        <zip zipfile="${distribution.dir}/${dist.name}.jar" update="false">
            <fileset dir="${build.dir}/type-war/WEB-INF/classes" />
        </zip>
    </target>
    
    <target name="jars" description="Updates JARS in WEB-INF/lib" depends="build.demo">
        <description>Copies JAR files to web/WEB-INF/lib (for Eclipse)</description>

    	<mkdir dir="web/WEB-INF/lib" />

        <delete>
            <fileset dir="web/WEB-INF/lib" includes="*.jar" />
        </delete>
        
        <unzip src="${distribution.dir}/${dist.name}.war" dest="web">
            <patternset includes="WEB-INF/lib/*.jar" />
        </unzip>
    </target>
  
    <target name="preprocess">
        <property file="${carrot2.code.dir}/carrot2.version" />
        <tstamp>
          <format property="tmp:build.tstamp" pattern="dd/MM/yyyy HH:mm" />
        </tstamp>

        <echo>
####
Setting inputSize.default to: ${webapp.inputSize.default}
Setting template.caching to: ${xsltFilter.template.caching}
Setting serializers factory to: ${webapp.serializersFactory}
Setting skin to: ${webapp.skin}
Setting localization to: ${webapp.localization}
####
        </echo>
    
        <filterset begintoken="@" endtoken="@" id="filter.webxml">
            <filter token="INPUT_SIZE_CHOICES" value="${webapp.inputSize.choices}"/>
            <filter token="INPUT_SIZE_DEFAULT" value="${webapp.inputSize.default}"/>
            <filter token="XSLT_TEMPLATE_CACHING" value="${xsltFilter.template.caching}"/>
            <filter token="SERIALIZERS_FACTORY" value="${webapp.serializersFactory}"/>
            <filter token="SKIN" value="${webapp.skin}"/>
            <filter token="LOCALIZATION" value="${webapp.localization}"/>
            <filter token="ALGORITHMS_PATH" value="${webapp.algorithms.path}" />
            <filter token="INPUTS_PATH" value="${webapp.inputs.path}" />	
            <filter token="XML_FEED_KEY" value="${webapp.xml.feed.key}" />	
            <filter token="QUERY_EXPANDER" value="${webapp.query.expander}" />	
            <filter token="VERSION" value="${release.number} (${tmp:build.tstamp})" />
        </filterset>

        <copy overwrite="true" file="web/WEB-INF/web.xml.template" tofile="web/WEB-INF/web.xml" filtering="true">
            <filterset refid="filter.webxml"/>
        </copy>
    </target>

    <target name="static-html">
      <description>
        Renders the two main application pages (startup and results) 
        into static HTML files with URLs pointing to and clustering being
        done on the demo deployment at demo.carrot2.org.
      </description>

      <antcall target="-static-html-internal">
        <param name="target-dir" value="static-html"/>
        <param name="init-from-url" value="true"/>
        <param name="show-progress" value="false"/>
        <param name="show-options" value="false"/>
        <param name="show-example-queries" value="false"/>
      </antcall>
    </target>

    <target name="prototype-html">
      <description>
        Renders the two main application pages (startup and results) 
        with one predefined set of documents and clusters to enable
        working on them in the "prototyping" mode.
      </description>

      <antcall target="-static-html-internal">
        <param name="target-dir" value="prototype"/>
        <param name="init-from-url" value="false"/>
        <param name="show-progress" value="true"/>
        <param name="show-options" value="true"/>
        <param name="show-example-queries" value="true"/>
      </antcall>
    </target>
    
    <target name="-static-html-internal">

      <property name="skin" value="fancy" />
      
      <xslt in="etc/static-html/meta.xml" out="tmp/${target-dir}/startup.html" 
            style="web/skins/${skin}/page.xsl">

        <outputproperty name="method" value="html" />
        <outputproperty name="standalone" value="yes"/>
        <outputproperty name="encoding" value="UTF-8"/>
        <outputproperty name="indent" value="yes" />

        <param name="show-input-descriptions" expression="true" />
        <param name="show-example-queries" expression="${show-example-queries}" />
        <param name="show-options" expression="${show-options}" />
        <param name="show-progress" expression="${show-progress}" />
        <param name="init-from-url" expression="${init-from-url}" />
        <param name="display-status-line" expression="false" />
      </xslt>
     
      <xslt in="etc/static-html/meta.xml" out="tmp/${target-dir}/search.html" 
            style="web/skins/${skin}/page.xsl" force="true">

        <outputproperty name="method" value="html" />
        <outputproperty name="standalone" value="yes"/>
        <outputproperty name="encoding" value="UTF-8"/>
        <outputproperty name="indent" value="yes" />

        <param name="show-input-descriptions" expression="true" />
        <param name="show-example-queries" expression="${show-example-queries}" />
        <param name="show-options" expression="${show-options}" />
        <param name="show-progress" expression="${show-progress}" />
        <param name="init-from-url" expression="${init-from-url}" />
        <param name="display-status-line" expression="false" />
        <param name="force-results-page" expression="true" />
      </xslt>
     
      <copy todir="tmp/${target-dir}" filtering="false">
        <fileset dir="web/skins/${skin}">
          <exclude name="**/*.bat" />
          <exclude name="**/*.sh" />
          <exclude name="**/*.swp" />
          <exclude name="**/*.xml" />
          <exclude name="**/*.xsl" />
          <exclude name="**/.svn" />
        </fileset>
      </copy>
     
      <copy todir="tmp/${target-dir}/img" filtering="false" overwrite="true">
        <fileset dir="etc/static-html/${skin}/img">
        </fileset>
      </copy>
    </target>
</project>
