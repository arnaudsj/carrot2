<!--
  Internal build script for Carrot2 Document Clustering Server. 
  Please use the 'dcs' target from the main build script to build the DCS.
  -->
<project name="carrot2.dcs" default="carrot2.dcs.fail">
  <!-- Base dir determined from the build file location -->
  <dirname property="carrot2.dcs.basedir"
           file="${ant.file.carrot2.dcs}" />

  <!-- Master build base dir -->
  <property name="carrot2.master.basedir"
            location="${carrot2.dcs.basedir}/../../" />

  <!-- DCS build dirs -->
  <property name="dcs.dir" location="tmp/dcs" />

  <!-- DCS dist file name base -->
  <property name="dcs.dist.base" value="${carrot2.dcs.base}" />

  <!-- DCS-specific dependencies -->
  <patternset id="lib.dcs">
    <include name="applications/carrot2-dcs/lib/*.jar" />
    <include name="applications/carrot2-dcs/lib/*.LICENSE" />
  </patternset>
      
  <!--
       Builds the DCS.
    -->
  <target name="carrot2.dcs.build" depends="carrot2.dcs.war">
    <mkdir dir="${dcs.dir}/lib" />
    <copy todir="${dcs.dir}/lib">
      <fileset dir="lib">
        <include name="**/jetty*.jar" />
        <include name="**/jetty*.LICENSE" />
        <include name="**/args4j*.jar" />
        <include name="**/args4j*.LICENSE" />
        <include name="**/servlet-api*.jar" />
        <include name="**/log4j-*.jar" />
        <include name="**/log4j-*.LICENSE" />
      </fileset>
      <mapper type="flatten" />
    </copy>

    <copy tofile="${dcs.dir}/classes/log4j.xml"
          file="core/carrot2-util-log4j/src/log4j-dcs.xml" />
    <jar jarfile="${dcs.dir}/lib/carrot2-dcs-bootstrap.jar">
      <fileset dir="${dcs.dir}/classes">
        <include name="**/DcsApp.class" />
        <include name="**/Log4jJettyLog.class" />
        <include name="**/*.xml" />
      </fileset>
      <fileset dir="core/carrot2-util-log4j/src">
        <include name="appender-*" />
        <include name="filters-*" />
      </fileset>
    </jar>

    <copy todir="${dcs.dir}" file="${carrot2.dcs.basedir}/etc/dcs.cmd" />
    <copy todir="${dcs.dir}" file="${carrot2.dcs.basedir}/etc/dcs.sh" />

    <copy todir="${dcs.dir}">
      <fileset dir="${carrot2.dcs.basedir}">
        <include name="examples/**" />
		<exclude name="**/tmp/**" />
		<exclude name="**/obj/**" />
      </fileset>
      <fileset dir="${carrot2.dcs.basedir}/etc">
        <include name="readme.txt" />
      </fileset>
      <fileset dir="${carrot2.master.basedir}">
        <include name="carrot2.LICENSE" />
        <include name="carrot2.CONTRIBUTORS" />
      </fileset>
    </copy>
  
    <delete dir="${dcs.dir}/classes" />
  </target>

  <!--
       Builds the DCS ZIP archive.
    -->
  <target name="carrot2.dcs.dist" depends="carrot2.dcs.build">
    <zip destfile="${dcs.dir}/../${dcs.dist.base}-${carrot2.version}.zip">
      <zipfileset dir="${dcs.dir}" prefix="${dcs.dist.base}" />
    </zip>
    <delete dir="${dcs.dir}" failonerror="false" />
  </target>

  <!-- 
       Builds the DCS war file.
    -->
  <target name="carrot2.dcs.war">
    <antcall target="jar" />
    <antcall target="lib.flattened" />

    <!-- Add DCS-specific JARs -->
    <copy todir="${lib.flattened}">
      <fileset dir="${carrot2.master.basedir}">
        <patternset refid="lib.dcs" />
      </fileset>
      <mapper type="flatten"/>
    </copy>
    
    <mkdir dir="${dcs.dir}" />
    <mkdir dir="${dcs.dir}/war" />

    <mkdir dir="${dcs.dir}/manifest" />
    <mkdir dir="${dcs.dir}/classes" />
    <manifest file="${dcs.dir}/manifest/MANIFEST.MF">
      <attribute name="Main-Class" value="org.carrot2.dcs.DcsApp" />
    </manifest>

    <!-- Clover hack: we explicitly provide the compiler attribute to compile without Clover's instrumentation -->
    <javac srcdir="${carrot2.dcs.basedir}/src"
           destdir="${dcs.dir}/classes"
           compiler="modern"
           source="1.5"
           target="1.5"
           encoding="UTF-8">
      <classpath refid="lib.classpath" />
      <classpath path="${jar.dir}/carrot2-core.jar" />
    </javac>

    <copy tofile="${dcs.dir}/classes/log4j.xml"
          file="core/carrot2-util-log4j/src/log4j-dcs.xml" />
    <war destfile="${dcs.dir}/war/carrot2-dcs.war"
         webxml="${carrot2.dcs.basedir}/web/WEB-INF/web.xml"
         manifest="${dcs.dir}/manifest/MANIFEST.MF">
      <fileset dir="${carrot2.dcs.basedir}/web">
        <exclude name="WEB-INF" />
      </fileset>
      <lib dir="${lib.flattened}" />
      <lib dir="${carrot2.dcs.basedir}/lib" />
      <classes dir="${dcs.dir}/classes">
        <exclude name="*.java" />
      </classes>
      <classes dir="${carrot2.dcs.basedir}/src">
        <include name="**/*.xml" />
        <exclude name="**/*.java" />
      </classes>
      <classes dir="core/carrot2-util-log4j/src">
        <include name="appender-*" />
        <include name="filters-*" />
      </classes>
    </war>

    <delete dir="${dcs.dir}/manifest" />
  </target>

  <!-- Copies the runtime resources to the compiled classes directory. -->
  <target name="carrot2.dcs.resources">
    <mkdir dir="${build.dir}" />

    <copy todir="${build.dir}" includeemptydirs="false">
      <fileset dir="applications">
        <include name="carrot2-dcs/src/**/*.xml" />
      </fileset>
      <regexpmapper from="^.*src(-resources)?(.*)$$" to="\2" />
    </copy>
  </target>

  <target name="carrot2.dcs.clean">
    <delete dir="${dcs.dir}" />
  </target>

  <target name="carrot2.dcs.fail">
    <fail>Please use the 'dcs' target from the main build script to build the DCS.</fail>
  </target>
</project>
