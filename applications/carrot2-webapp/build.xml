<!--
  Internal build script for Carrot2 web application. 
  Please use the 'webapp' target from the main build script to build the web application.
  -->
<project name="carrot2.webapp" default="basedir.check">
  <!-- Base dir determined from the build file location -->
  <dirname property="carrot2.webapp.basedir"
           file="${ant.file.carrot2.webapp}" />

  <!-- Master build base dir -->
  <property name="carrot2.master.basedir"
            location="${carrot2.webapp.basedir}/../../" />

  <!-- Build number, provided by Bamboo -->
  <property name="build.number" value="" />
  <property file="${carrot2.master.basedir}/etc/version/carrot2.version" />

  <!-- Import common macros -->
  <import file="${carrot2.master.basedir}/etc/ant/common/basedir.xml" />
  <import file="${carrot2.master.basedir}/etc/ant/common/webtest.xml" />
  <import file="${carrot2.webapp.basedir}/etc/ant/webapp.xml" />

  <!-- Load properties from the master base dir, otherwise sprites generator will not work -->
  <property file="${carrot2.master.basedir}/local.properties" />
  
  <!-- Customizable properties -->
  <property name="jawr.properties.template.path"
            location="${carrot2.webapp.basedir}/src/jawr.template.properties" />
  <property name="config.xml.template.path"
            location="${carrot2.webapp.basedir}/src/config.template.xml" />
  <property name="war.name.base" value="${carrot2.webapp.base}" />
  

  <!-- Webapp build dirs -->
  <property name="webapp.dir" location="tmp/webapp" />
  <property name="webapp.classes.dir" location="${webapp.dir}/classes" />
  <property name="webapp.lib.dir" location="${webapp.dir}/lib" />
  <property name="webapp.skins.dir"
            location="${webapp.dir}/skins${build.number}" />

  <!-- Webtest parameters -->
  <property name="cargo.dir" location="${carrot2.webapp.basedir}/tmp/cargo" />
  <property name="webtest.report.dir" location="tmp/webapp-webtest-report" />

  <!-- Webapp-specific dependencies -->
  <patternset id="lib.webapp">
    <include name="applications/carrot2-webapp/lib/*.jar" />
    <include name="applications/carrot2-webapp/lib/*.LICENSE" />
    <include name="lib/com.planetj.compression/*.jar" />
    <include name="lib/com.planetj.compression/*.LICENSE" />
  	<include name="lib/org.apache.log4j/*.LICENSE" />
    <include name="lib/org.apache.log4j/*.jar" />
    <include name="lib/org.slf4j/slf4j-log4j12-*.jar" />
  </patternset>

  <!-- 
       Build the web application WAR file.
    -->
  <target name="carrot2.webapp.build" depends="basedir.check, carrot2.webapp.prepare, carrot2.webapp.war, carrot2.webapp.cleanup" />

  <!--
       Assembles the web applications WAR file.
    -->
  <target name="carrot2.webapp.war" depends="basedir.check, lib.flattened">
    <copy todir="${webapp.lib.dir}">
      <fileset dir="${carrot2.master.basedir}">
        <patternset refid="lib.webapp" />
      </fileset>
      <mapper type="flatten"/>
    </copy>
      
    <war destfile="${webapp.dir}/${war.name.base}.war"
         webxml="${carrot2.webapp.basedir}/web/WEB-INF/web.xml">
      <fileset dir="${carrot2.webapp.basedir}/web">
        <include name="index.html" />
      </fileset>
      <fileset dir="${webapp.skins.dir}/..">
        <include name="skins${build.number}/**" />
      </fileset>

      <lib dir="${lib.flattened}">
      	<exclude name="**/slf4j-nop-*.jar" />
      	<exclude name="**/carrot2-mini*.jar" />
      	<exclude name="**/carrot2-core-sources*.jar" />
      </lib>
      <lib dir="${webapp.lib.dir}" />

      <classes dir="${webapp.classes.dir}" />
    </war>
  </target>

  <!--
       Builds the webapp distribution. Currently, it just moves the WAR file
       to the output directory, not sure it if makes sense to wrap it with an extra ZIP file.
    -->
  <target name="carrot2.webapp.dist" depends="basedir.check, carrot2.webapp.webtest.war">
    <move file="${webapp.dir}/${war.name.base}.war" tofile="${webapp.dir}/../${war.name.base}-${carrot2.version}.war" />
    <delete dir="${webapp.dir}" failonerror="false" />
  </target>

  <!--
       Performs a quick smoketest of the webapp WAR.
    -->
  <target name="carrot2.webapp.webtest.war" depends="basedir.check, carrot2.webapp.build, carrot2.common.webtest.war.prepare"
          if="webtest.war.resources.available">
    <webtest-war cargo.tmp.dir="tmp/cargo"
                 war.path="${webapp.dir}/${war.name.base}.war"
                 war.base.name="${war.name.base}"
                 webtest.tests.dir="${carrot2.webapp.basedir}/webtest"
                 webtest.report.dir="${webtest.report.dir}" />
  </target>

  <target name="carrot2.webapp.webtest.localhost" depends="basedir.check, carrot2.common.webtest.deployed.check"> 
    <webtest-deployed webtest.tests.dir="${carrot2.webapp.basedir}/webtest"
                      webtest.report.dir="${webtest.report.dir}" 
                      webtest.basepath="/" />
  </target>
    
  <!--
       Prepares resources the web applications WAR file. "Build scripts "extending" this
       script may want to add their own preparation steps (e.g. copy extra skins)
       before they let this script assemble the complete WAR file.
    -->
  <target name="carrot2.webapp.prepare"
          depends="basedir.check, carrot2.webapp.templates.war, carrot2.webapp.classes, carrot2.webapp.attributes.war, carrot2.webapp.suites, carrot2.webapp.skins, carrot2.webapp.sprites.war" />

  <!--
       Compiles the main web application classes and copies log4j configuration.
    -->
  <target name="carrot2.webapp.classes" depends="basedir.check, jar">
    <mkdir dir="${webapp.classes.dir}" />

    <javac srcdir="${carrot2.webapp.basedir}/src" destdir="${webapp.classes.dir}">
      <classpath refid="lib.classpath" />
      <classpath path="${jar.dir}/carrot2-core-${carrot2.version}.jar" />
    </javac>

    <copy todir="${webapp.classes.dir}">
        <fileset dir="${carrot2.webapp.basedir}/src">
            <exclude name="**/*.java" />
            <exclude name="*.properties" />
            <exclude name="config.*" />
        </fileset>
    </copy>

    <!-- Log4j specific config -->
    <copy tofile="${webapp.dir}/classes/log4j.xml"
          file="${carrot2.master.basedir}/core/carrot2-util-log4j/src/log4j-webapp.xml" />
    <copy todir="${webapp.classes.dir}">
      <fileset dir="${carrot2.master.basedir}/core/carrot2-util-log4j/src">
        <include name="appender-*" />
        <include name="filters-*" />
      </fileset>
    </copy>
  </target>

  <!--
       Copies the default component suites. Can be disabled by "extending" build scripts.
    -->
  <target name="carrot2.webapp.suites" unless="carrot2.webapp.no-default-suites" depends="basedir.check">
    <copy todir="${webapp.classes.dir}">
      <fileset dir="${carrot2.master.basedir}/core/carrot2-component-suites/suites">
        <include name="suites/algorithm-*.xml" />
        <include name="suites/source-*.xml" />
        <include name="suites/suite-webapp.xml" />
      </fileset>
    </copy>
  </target>

  <!--
       Copies "source" skin files to a work directory.
    -->
  <target name="carrot2.webapp.skins" depends="basedir.check">
    <mkdir dir="${webapp.skins.dir}" />
    <copy todir="${webapp.skins.dir}">
      <fileset dir="${carrot2.webapp.basedir}/web/skins" />
    </copy>
  </target>

  <!--
       Builds sprite images in the skins work directory.
    -->
  <target name="carrot2.webapp.sprites.war" if="smartsprites.home" depends="basedir.check, carrot2.webapp.skins">
    <carrot2.webapp.sprite-skins webapp.skins.dir="${webapp.skins.dir}" />
  </target>

  <!--
       Builds sprite images in the skin source directory.
    -->
  <target name="carrot2.webapp.sprites.eclipse" if="smartsprites.home" depends="basedir.check">
    <carrot2.webapp.sprite-skins webapp.skins.dir="${carrot2.webapp.basedir}/web/skins" />
  </target>

  <!--
       Processes all the files required to run the web application from Eclipse.
    -->
  <target name="carrot2.webapp.eclipse.setup" 
          depends="basedir.check, carrot2.webapp.templates.eclipse, carrot2.webapp.sprites.eclipse, carrot2.webapp.attributes.eclipse" />

  <!--
       Substitutes variables in config.xml, jawr.properties and web.xml files.
    -->
  <macrodef name="carrot2.webapp.templates">
    <attribute name="target.dir" />
    <attribute name="template.caching" default="true" />
    <sequential>
      <carrot2.webapp.templates.config config.xml.template.path="${config.xml.template.path}"
                                       target.dir="@{target.dir}" />
      
      <carrot2.webapp.templates.jawr jawr.properties.template.path="${jawr.properties.template.path}"
                                     target.dir="@{target.dir}" />
        
      <copy file="${carrot2.webapp.basedir}/web/WEB-INF/web.template.xml"
            tofile="${carrot2.webapp.basedir}/web/WEB-INF/web.xml"
            overwrite="true">
        <filterset refid="version.filterset" />
        <filterset>
          <filter token="TEMPLATE_CACHING" value="@{template.caching}" />
        </filterset>
      </copy>

      <tstamp><format property="build.date" pattern="yyyy-MM-dd HH:mm" /></tstamp>
        
      <copy file="${carrot2.webapp.basedir}/web/skins/common/variables.template.xsl"
            tofile="${carrot2.webapp.basedir}/web/skins/common/variables.xsl"
            overwrite="true">
        <filterset>
          <filter token="VERSION_NUMBER" value="${carrot2.version}" />
          <filter token="BUILD_NUMBER" value="${build.number}" />
          <filter token="BUILD_DATE" value="${build.date}" />
        </filterset>
      </copy>
    </sequential>
  </macrodef>

  <!--
       Substitutes variables in config.xml, jawr.properties and web.xml files and saves
       the results to the classes working dir.
    -->
  <target name="carrot2.webapp.templates.war" depends="basedir.check">
    <carrot2.webapp.templates target.dir="${webapp.classes.dir}" />
  </target>

  <!--
       Substitutes variables in config.xml, jawr.properties and web.xml files and saves
       the results to the source dirs.
    -->
  <target name="carrot2.webapp.templates.eclipse" depends="basedir.check">
    <carrot2.webapp.templates target.dir="${carrot2.webapp.basedir}/src"
               template.caching="false" />
  </target>

  <!--
       Generates metadata files for webapp-specific document sources.
    -->
  <target name="carrot2.webapp.attributes.war" depends="basedir.check, compile">
  </target>

  <!--
       Generates metadata files for webapp-specific document sources.
    -->
  <target name="carrot2.webapp.attributes.eclipse" depends="basedir.check, compile">
  </target>

  <!--
       Removes temporary files left after building the web application.
    -->
  <target name="carrot2.webapp.cleanup" depends="basedir.check">
  	<delete dir="${webapp.lib.dir}" />
    <delete dir="${webapp.classes.dir}" />
    <delete dir="${webapp.skins.dir}" />
  </target>

  <!--
       Removes the WAR file and all temporary files.
    -->
  <target name="carrot2.webapp.clean" depends="basedir.check">
    <delete dir="${webapp.dir}" />
  </target>

  
  <!--
       Helps to debug XSLT compilation problems. For some reason, the embedded Xalan
       does not output any information about the reason why the stylesheet doesn't compile.
    -->
  <target name="carrot2.webapp.xslt.debug">
    <delete file="tmp/startup.html" />
    <xslt style="${carrot2.webapp.basedir}/web/skins/fancy-compact/page.xsl"
          in="${carrot2.webapp.basedir}/etc/xslt-debug/startup.xml" 
          out="tmp/startup.html" />
  </target>

  <target name="basedir.check">
    <basedir-check main-basedir="${basedir}" internal-basedir="${carrot2.webapp.basedir}" />
  </target>
</project>
